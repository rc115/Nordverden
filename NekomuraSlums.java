/* 
* Rigoberto Castro
* Roberto Mata
* Jennifer Millan
* Delil Tursun
* Kanishq Viradiya
* 
* CS2011 Final: Text Based Adventure Game
* {Temp} Project Name: Nekomura Slums
*
*    _____   __    ______                                        
*    ___  | / /_______  /______________ _______  ______________ _
*    __   |/ /_  _ \_  //_/  __ \_  __ `__ \  / / /_  ___/  __ `/
*    _  /|  / /  __/  ,<  / /_/ /  / / / / / /_/ /_  /   / /_/ / 
*    /_/ |_/  \___//_/|_| \____//_/ /_/ /_/\__,_/ /_/    \__,_/  
*                                         ______             
*                                        / __/ /_ ____ _  ___
*                                       _\ \/ / // /  ' \(_-<
*                                      /___/_/\_,_/_/_/_/___/
*
* Ascii art generated by: https://www.patorjk.com/software/taag/#p=display&f=Speed&t=Nekomura
*
* Inspirations: Fallout 1 & 2 by Interplay, TES: Skyrim by Bethesda
* Mechanics inpired by the youtuber Magic The Noah
* 
*/



import java.util.Scanner;
import java.util.Random;



public class NekomuraSlums {

    static Scanner input = new Scanner(System.in);
    static Random rand = new Random();

// --->   Function Junction   <---



// Method for taking the user's input (also gives user more options like quiting)
static String playerSelection(){
    String pSel = "";
    pSel = input.next();

    if (pSel.equals("exit")) {
        System.out.println("\nGoodbye\n");
        input.close();
        System.exit(0);
    }

    System.out.println("\n____________________________________________________________________________________________________\n");

    return pSel;
}

// Method that clears the screen
static void clearConsole() {
    System.out.println("\n____________________________________________________________________________________________________\n");
    System.out.println("Clearing Screen...");
    try {
        Thread.sleep(3000); // Waits 3 secs before clearing screen
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
    }

    for (int i = 0; i < 50; i++) {
        System.out.println("\n\n");
    }
}










// -->  Character Creator Methods  <--

/*
* New character creator does not rely on global variables (I still don't know if they are allowed or not but better to not risk it)
* New method logic was generated by ChatGPT using characterCreator() method
* characterCreator() was made by me but based off the character creator system from Nordverden
* ChatGPT spit out garbage that didn't work but I fixed it to work as well as before
*/

// Setting the name is its own method now rather than being set inside the characterCreator() method same logic is used tho, just returns a value and sets it as the Kara's name
static String setKaraName(String name) {
    if (name.equals("Kara")) {
        System.out.println("\n____________________________________________________________________________________________________\n");
        System.out.print("What is your character's name: ");

        String newName = input.nextLine(); // Takes player's input for Kara's name
        name = newName;

        System.out.println("\n" + name + " is your character's new name.\n"
            + "\n1. Confirm name\n2. Change name\n"
        );

        switch (playerSelection()) {
            case "2":
                System.out.print("Clearing name...");
                input.nextLine(); // Clears input to make room for new name
                return setKaraName("Kara"); // Runs again if player wants a new name
            default: return name;
        }        
    }

    return name;
}

// Method that return a list containing Kara's skills [0 = Strength, 1 = Speech, 2 = Stamina, 4 = Sneak]
static int[] setSkills(int[] skills) {
    int skillPts = 40;

    while (skillPts > 0) {
        System.out.println("\nWhat skill would you like to assign 10 points to:");
        System.out.println("\n1. Strength\n2. Speech\n3. Stamina\n4. Sneak\n");

        switch (playerSelection()) {
            case "1":
                skills[0] += 10;
                skillPts -= 10;
                System.out.println("10 points have been assigned to Strength.");
                break;
            case "2":
                skills[1] += 10;
                skillPts -= 10;
                System.out.println("10 points have been assigned to Speech.");
                break;
            case "3":
                skills[2] += 10;
                skillPts -= 10;
                System.out.println("10 points have been assigned to Stamina.");
                break;
            case "4":
                skills[3] += 10;
                skillPts -= 10;
                System.out.println("10 points have been assigned to Sneak.");
                break;
            default:
                System.out.println("That's not an option.");
                continue;
        }

        System.out.println("Points Available: " + skillPts);
    }

    System.out.println("\nThese are your character's skills:");
    System.out.println(
          "Strength (" + skills[0] + ")\n"
        + "Speech (" + skills[1] + ")\n"
        + "Stamina (" + skills[2] + ")\n"
        + "Sneak (" + skills[3] + ")\n"
    );

    System.out.println("Are you happy with these or would you like to change them?");
    System.out.println("\n1. Continue\n2. Reset Skills\n");

    switch (playerSelection()) {
        case "2":
            skills[0] = 0;
            skills[1] = 0;
            skills[2] = 0;
            skills[3] = 0;
            setSkills(skills);
            break;
        default:
            System.out.println("Skills Confirmed!");
            System.out.println("\n____________________________________________________________________________________________________\n");
    }

    return skills;
}

// Method that return a list with Damage Multipliers [0 = Sharp, 1 = Blunt, 2 = Elemental, 4 = Ranged]
static double[] setDamageMultipliers(double[] damageMultipliers) {
    double dmgPts = 2.0;

    while (dmgPts > 0) {
        System.out.println("What damage multiplier would you like to assign 0.5 points to:");
        System.out.println("\n1. Sharp\n2. Blunt\n3. Elemental\n4. Ranged\n");

        switch (playerSelection()) {
            case "1":
                damageMultipliers[0] += 0.5;
                dmgPts -= 0.5;
                System.out.println("0.5 points have been assigned to Sharp Damage!");
                break;
            case "2":
                damageMultipliers[1] += 0.5;
                dmgPts -= 0.5;
                System.out.println("0.5 points have been assigned to Blunt Damage!");
                break;
            case "3":
                damageMultipliers[2] += 0.5;
                dmgPts -= 0.5;
                System.out.println("0.5 points have been assigned to Elemental Damage!");
                break;
            case "4":
                damageMultipliers[3] += 0.5;
                dmgPts -= 0.5;
                System.out.println("0.5 points have been assigned to Ranged Damage!");
                break;
            default:
                System.out.println("That's not an option.");
                continue;
        }

        System.out.println("Points Available: " + dmgPts);
    }

    System.out.println("These are your Damage Multipliers:");
    System.out.println(
          "Sharp (" + damageMultipliers[0] + ")\n"
        + "Blunt (" + damageMultipliers[1] + ")\n"
        + "Elemental (" + damageMultipliers[2] + ")\n"
        + "Ranged (" + damageMultipliers[3] + ")\n"
    );

    System.out.println("Are you happy with these or would you like to change them?");
    System.out.println("\n1. Continue\n2. Reset Damage Multipliers\n");

    switch (playerSelection()) {
        case "2":
            damageMultipliers[0] = 0;
            damageMultipliers[1] = 0;
            damageMultipliers[2] = 0;
            damageMultipliers[3] = 0;
            setDamageMultipliers(damageMultipliers);
            break;
        default:
            System.out.println("Damage Multipliers Confirmed!");
            System.out.println("\n____________________________________________________________________________________________________\n");
    }

    return damageMultipliers;
}

// Method that lets the player choose Kara's Background
static String setOldJob() {
    String job = "Unemployed";
    System.out.println("\n____________________________________________________________________________________________________\n");
    System.out.print("What was your character's occupation:\n");
    System.out.println("\n1. Sushi Chef\n2. Steel Worker\n3. Farmer\n4. Catnip Dealer\n5. CEO\n");

    switch (playerSelection()) {
        case "1":
            job = "Sushi";
            break;
        case "2":
            job = "Steel";
            break;
        case "3":
            job = "Farmer";
            break;
        case "4":
            job = "Dealer";
            break;
        case "5":
            job = "CEO";
            break;
        default:
            job = "Unemployed";
            return setOldJob();
    }

    return job;
}

// Method tha gives Kara bonus skills based on previous job
static int[] jobSkills(String job, int[] skills) {
    if (job.equals("Sushi")) {
        skills[1] += 10;
    } else if (job.equals("Steel")) {
        skills[0] += 10;
    } else if (job.equals("Farmer")) {
        skills[2] += 10;
    } else if (job.equals("Dealer")) {
        skills[3] += 10;
    }

    return skills;
}

// Method that gives Kara money based on their old job
static int jobMoney(String job, int money) {
    if (job.equals("Sushi")) {
        money = 100;
    } else if (job.equals("Steel")) {
        money = 150;
    } else if (job.equals("Farmer")) {
        money = 100;
    } else if (job.equals("Dealer")) {
        money = 200;
    } else if (job.equals("CEO")) {
        money = 10000;
    }

    return money;
}

// Method that gives Kara a weapon based on their job
static String startWeapon(String job) {
    String weapon = "";
    if (job.equals("Sushi")) {
        weapon = "Cleaver";
    } else if (job.equals("Steel")) {
        weapon = "Steel Pipe";
    } else if (job.equals("Farmer")) {
        weapon = "Pesticide Sprayer";
    } else if (job.equals("Dealer")) {
        weapon = "9mm";
    }

    return weapon;
}

// Method that sets weapon damage for the start weapon
static int startDamage(String weapon) {
    int damage = 0;
    if (weapon.equals("Cleaver")) {
        damage = 11;
    } else if (weapon.equals("Steel Pipe")) {
        damage = 9;
    } else if (weapon.equals("Pesticide Sprayer")) {
        damage = 8;
    } else if (weapon.equals("9mm")) {
        damage = 15;
    }

    return damage;
}

// Method that gives Kara a weapon based on their job
static String startDmgType(String job) {
    String dmgType = "";
    if (job.equals("Sushi")) {
        dmgType = "Sharp";
    } else if (job.equals("Steel")) {
        dmgType = "Blunt";
    } else if (job.equals("Farmer")) {
        dmgType = "Elemental";
    } else if (job.equals("Dealer")) {
        dmgType = "Ranged";
    }

    return dmgType;
}

// --> Character Creator Methods End <--










// -->  Turn Based Combat System  <--

/*
* New combat system is heavily dulited compared to Nordverden but still functions as a turn based combat system
* All methods were hand written by me (Rigo) using pieces of Nordverden's TBCS
* Only able to fight 1 enemy at a time with this system :/
* Leveling up also need to be done manually and there is no level curve
*/

// Main method that starts and ends combat also sets lives if the player died
static int combat(String kName, int kHealth, int kMaxHealth, int kDamage, double kDmgRes, String kDmgType, int[] skills, double[] damageMultipliers, int luck, int lives, String eName, int eHealth, int eDamage) {
    clearConsole();

    // Combat Variables
    boolean inCombat = true;
    double dmgMult = 0.0;
    int damage = 0;
    int kHitChance = 0;
    int escapeChance = 0;

    int enemyDamage = 0;
    int eHitChance = 0;

    int kRange = 0;
    int turns = 0;

    // Sets ammount of turn based on Kara's Stamina
    if (skills[2] == 100) {
        turns = 5;
    } else if (skills[2] >= 700) {
        turns = 3;
    } else if (skills[2] >= 40) {
        turns = 2;
    } else {
        turns = 1;
    }

    // Sets damage multiplier based on damage type
    if (kDmgType.equals("Sharp")) {
        dmgMult = damageMultipliers[0];
    } else if (kDmgType.equals("Blunt")) {
        dmgMult = damageMultipliers[1];
    } else if (kDmgType.equals("Elemental")) {
        dmgMult = damageMultipliers[2];
    } else if (kDmgType.equals("Ranged")) {
        dmgMult = damageMultipliers[3];
    }

    // Damage equation (takes damage, multiplies it by the damage multiplier, then adds bonus for strength)
    damage = (int)((kDamage*dmgMult) + (skills[0]/10));

    // Keeps going until Kara kills the enemy or runs away (both count as a win tho)
    while (inCombat) {
        // Displays Kara and the enemy's health
        System.out.println(kName + "'s health: " + kHealth + "/" + kMaxHealth);
        System.out.println(eName + "'s health: " + eHealth);


    // Kara's Turn

        // Give the player the choice to attack or run away
        System.out.println("\n1. Fight\n2. Flee\n");

        switch (playerSelection()) {
            case "1": // If player decides to fight...
                for (int i = 0; i < turns; i++) { // number of attacks determined by stamina
                    kHitChance = rand.nextInt(20) + 1 + luck; // "20 sided die" determines if Kara's attack hit
 
                    if (kHitChance >= 20) { // Kara does double damage if a 20 or higher is rolled
                        System.out.println("*CRITICAL HIT*");
                        eHealth -= damage*2;
                        System.out.println(kName + " hit " + eName + " and did " + damage*2 + " damage!\n");
                    } else if (kHitChance >= 10) { // removes health from enemy (ammount is based on damage)
                        eHealth -= damage;
                        System.out.println(kName + " hit " + eName + " and did " + damage + " damage!\n");
                    } else { // If the dice rolls less than 10 the attack misses
                        System.out.println(kName + " missed!\n");
                    }

                    // breaks loop if enemy dies before turn ends
                    if (eHealth <= 0)
                        break;
                }

                // Ends combat if enemy's health drops to 0
                if (eHealth <= 0) {
                    System.out.println(kName + " defeated " + eName + "!\n");
                    inCombat = false;
                    continue;
                }
                break;
            case "2": // If the player tries to run
                escapeChance = rand.nextInt(100) + 1;
                if (escapeChance < (skills[3] + luck*10)) { // Ends combat if Kara's sneak skill is higher than the escape chance (0-100 roll)
                    System.out.println(kName + " got away safely!\n");
                    inCombat = false;
                    continue;
                } else { // Continues fight if escape chance was too high or if sneak is too low
                    System.out.println(kName + " was not able to get away...\n");
                }
                break;
            default: continue;
        }

    // Enemy's Turn

        // Ranged weapons get a -2 chance to hit Kara
        kRange = (kDmgType.equals("Ranged"))? 2 : 0;

        // "20 sided die" determines if the enemy's attack hits
        eHitChance = rand.nextInt(20) + 1; 
        eHitChance = (kRange == 2)? eHitChance - 2: eHitChance;

        // Enemy only gets one attack per turn but combat doesn't end unless enemy dies or Kara runs
        if (eHealth > 0 && eHitChance >= 10) { // If enemy is alive and their attack hit...
            enemyDamage = (eHitChance == 20)? eDamage*2 : (int)(eDamage / kDmgRes);

            if (eHitChance >= 18) { // Ctritical hit chance is lower for enemy so that ranged weapons are too powerful (they still might be)
                System.out.println(eName + " got a critical hit!");
                kHealth -= enemyDamage*2;
                System.out.println(eName + " attacked " + kName + " and did " + enemyDamage*2 + " damage!\n");
            } else {
                kHealth -= enemyDamage;
                System.out.println(eName + " attacked " + kName + " and did " + enemyDamage + " damage!\n");
            }

            // Removes a life if the enemy kills Kara
            if (kHealth <= 0) {
                System.out.println(kName + " died!\n");
                
                lives--;

                // If the player runs out of lives it ends the game (might be too harsh but idk. Maybe we add a way to gain lives)
                if (lives < 0) {
                    System.out.println(kName + " ran out of lives...");
                    System.out.println(kName + "'s journey ended unexpectedly.");
                    clearConsole();
                    input.close();
                    System.exit(1);
                }

                System.out.println("BUT THAT DIDNT STOP " + kName.toUpperCase() + "!\n");
                System.out.println("Lives left: " + lives);
                damage += 10;
                kHealth = kMaxHealth;
            }
        } else {
            System.out.println(eName + " missed!\n");
        }
    }

    return lives;
}

// Method that increases Kara's level
static int levelUp(String kName, int level) {
    level++;
    System.out.println(kName + " leveled up!\n");
    System.out.println(kName + " is now level " + level);
    return level;
}

// Method that lets player increase Kara's skills (skill cap is 100)
static int[] increaseSkills(String kName, int[] skills) {
    System.out.println("What skill would you like to assign 5 points to:");
    System.out.println("\n1. Strength\n2. Speech\n3. Stamina\n4. Sneak\n");

    switch (playerSelection()) {
        case "1":
            if (skills[0] >= 100) {
                skills[0] = 100;
                System.out.println("Sorry! " + kName + " reached the max Strength level.");
            } else {
                skills[0] += 5;
                System.out.println("5 points have been assigned to Strength.");
            }
            break;
        case "2":
            if (skills[1] >= 100) {
                skills[1] = 100;
                System.out.println("Sorry! " + kName + " reached the max Speech level.");
            } else {
                skills[1] += 5;
                System.out.println("5 points have been assigned to Speech.");
            }
            break;
        case "3":
            if (skills[2] >= 100) {
                skills[2] = 100;
                System.out.println("Sorry! " + kName + " reached the max Stamina level.");
            } else {
                skills[2] += 5;
                System.out.println("5 points have been assigned to Stamina.");
            }
            break;
        case "4":
            if (skills[3] >= 100) {
                skills[3] = 100;
                System.out.println("Sorry! " + kName + " reached the max Sneak level.");
            } else {
                skills[3] += 5;
                System.out.println("5 points have been assigned to Sneak.");
            }
            break;
        default:
            System.out.println("That's not an option.");
    }

    return skills;
}

// Method that lets player increase Kara's damage multipliers (damage multipliers are capped at 3.0)
static double[] increaseDamage(String kName, double[] damageMultipliers) {
    System.out.println("What damage multiplier would you like to assign 0.25 points to:");
    System.out.println("\n1. Sharp\n2. Blunt\n3. Elemental\n4. Ranged\n");

    switch (playerSelection()) {
        case "1":
            if (damageMultipliers[0] >= 3.0) {
                damageMultipliers[0] = 3.0;
                System.out.println("Sorry! " + kName + " has reached the max miltiplier for Sharp damage.");
            } else {
                damageMultipliers[0] += 0.25;
                System.out.println("0.25 points have been assigned to Sharp damage.");
            }
            break;
        case "2":
            if (damageMultipliers[1] >= 3.0) {
                damageMultipliers[1] = 3.0;
                System.out.println("Sorry! " + kName + " has reached the max miltiplier for Blunt damage.");
            } else {
                damageMultipliers[1] += 0.25;
                System.out.println("0.25 points have been assigned to Blunt damage.");
            }
            break;
        case "3":
            if (damageMultipliers[2] >= 3.0) {
                damageMultipliers[2] = 3.0;
                System.out.println("Sorry! " + kName + " has reached the max miltiplier for Elemental damage.");
            } else {
                damageMultipliers[2] += 0.25;
                System.out.println("0.25 points have been assigned to Elemental damage.");
            }
            break;
        case "4":
            if (damageMultipliers[3] >= 3.0) {
                damageMultipliers[3] = 3.0;
                System.out.println("Sorry! " + kName + " has reached the max miltiplier for Ranged damage.");
            } else {
                damageMultipliers[3] += 0.25;
                System.out.println("0.25 points have been assigned to Ranged damage.");
            }
            break;
        default:
            System.out.println("That's not an option.");
    }

    clearConsole();
    return damageMultipliers;
}

// -->  End of TBCS  <--










// --->   End Of Function Junction   <---

    public static void main(String args[]){

        System.out.println(
            "\n"
          + "\n    Welcome to"
          + "\n    _____   __    ______                                          "
          + "\n    ___  | / /_______  /______________ _______  ______________ _  "
          + "\n    __   |/ /_  _ \\_  //_/  __ \\_  __ `__ \\  / / /_  ___/  __ `/  "
          + "\n    _  /|  / /  __/  ,<  / /_/ /  / / / / / /_/ /_  /   / /_/ /   "
          + "\n    /_/ |_/  \\___//_/|_| \\____//_/ /_/ /_/\\__,_/ /_/    \\__,_/    "
          + "\n                                         ______                   "
          + "\n                                        / __/ /_ ____ _  ___      "
          + "\n                                       _\\ \\/ / // /  ' \\(_-<      "
          + "\n                                      /___/_/\\_,_/_/_/_/___/      "
          + "\n                                       Version 0.003.110324"
          + "\n" 
        );


    // -->  varHell = true  <---

        // Character Variables:
        String kName = "Kara"; 
        // NOTE: Kara is just a shorhand for character because I got tire of writing "Character" every time
        // It also helps differentiate the character from the player

        int kHealth = 100;
        int kMaxHealth = 100;
        int level = 1;
        int lives = 9;
        int[] skills = new int[4];
        double[] damageMultipliers = new double[4];
        String oldJob = "Unemployed";
        int luck = 0;
        int schmeeps = 0; // currency or money

        // Combat Variables
        String kWeapon = "Fists";
        String kDmgType = "Blunt";
        int kDamage = 5;
        String kArmour = "Clothes";
        double kDmgRes = 0.5;

        // Merchant variables
        String[] itemsForSale = new String[5];
        int[] itemCost = new int[5];

        // Reputation variables (a group/gang will attack Kara if their reputation is too low)
        // These should also be able to fit in a list I just wanted to visualize it better
        int govRep = 0;
        // Gangs (names can change)
        int stabbasRep = 0;
        int shoottasRep = 0;

    // -->  varHell = false  <--



    // Character Creator:

        kName = setKaraName(kName);
        skills = setSkills(skills);
        damageMultipliers = setDamageMultipliers(damageMultipliers);
        oldJob = setOldJob();
        skills = jobSkills(oldJob, skills);
        schmeeps = jobMoney(oldJob, schmeeps);
        luck = (oldJob.equals("CEO"))? 1 : 0;
        kWeapon = startWeapon(oldJob);
        kDamage = startDamage(kWeapon);
        kDmgType = startDmgType(oldJob);
        clearConsole();

        // Debugging character
        if (kName.equals("D. Bugger")) {
            skills[0] = 100;
            skills[1] = 100;
            skills[2] = 100;
            skills[3] = 100;
            damageMultipliers[0] = 3.0;
            damageMultipliers[1] = 3.0;
            damageMultipliers[2] = 3.0;
            damageMultipliers[3] = 3.0;
            schmeeps = 1000000;
            luck = 10;
            kWeapon = "Dragonn KLR 20mm Anti-Matiriel Rifle";
            kDamage = 100;
            kDmgType = "Ranged";
            kArmour = "T-Shirt and Jorts";
            kDmgRes = 3.0;
            System.out.println(kName + " ready.");
        }









    /*
    * ACT 1
    * 
    * This section just sets the background for why Kara ends up in the slums of Keji
    * It's still early enough that we can change everything
    * Story is still wip tho I just wrote something up quickly to have an idea of what to do
    * 
    */



        // Sets a custom start and location based on player's choice of job
        if (oldJob.equals("Sushi")) {
            System.out.println("DEBUG{SHUSHI CHEF START}");
        } else if (oldJob.equals("Steel")) {
            System.out.println("DEBUG{STEEL WORKER START}");
        } else if (oldJob.equals("Farmer")) {
            System.out.println("DEBUG{FARMER START}");
        } else if (oldJob.equals("Dealer")) {
            System.out.println("DEBUG{CATNIP DEALER START}");
        } else if (oldJob.equals("CEO")) {
            System.out.println("DEBUG{CEO START}");
        } else {
            System.out.println("DEBUG{SOMETHING BROKE}");
        }

        /*
        * Examples of what could happen :
        *
        * Kara ends up in the slums after loosing or quitting their job
        * {Story stuff goes here}
        *
        * Kara finds a book that starts thier journey
        * {Moves on to act 2}
        */






    // Debugging/Testing Area: (This is all temporary and should get removed later)

        System.out.println("\n\nEntering debug area...\n\n");

        System.out.println("KARA STATS:\n");
        System.out.println(
              "NAME: " + kName + "\n"
            + "HEALTH: " + kHealth + "/" + kMaxHealth + "\n"
            + "LEVEL: " + level + "\n"
            + "LIVES: " + lives + "\n"
            + "LUCK: " + luck + "\n"
            + "SCHMEEPS: " + schmeeps + "\n\n"
            + "SKILLS:\n"
            + "Strength (" + skills[0] + ")\n"
            + "Speech (" + skills[1] + ")\n"
            + "Stamina (" + skills[2] + ")\n"
            + "Sneak (" + skills[3] + ")\n\n"
            + "DMG MULT:\n"
            + "Sharp (" + damageMultipliers[0] + ")\n"
            + "Blunt (" + damageMultipliers[1] + ")\n"
            + "Elemental (" + damageMultipliers[2] + ")\n"
            + "Ranged (" + damageMultipliers[3] + ")\n\n"
            + "WEAPON: " + kWeapon + "\n"
            + "DAMAGE: "+ kDamage +"\n"
            + "DAMAGE TYPE: " + kDmgType + "\n\n"
            + "ARMOUR: " + kArmour + "\n"
            + "DAMAGE RESISTANCE: " + kDmgRes + "\n\n"
        );
        clearConsole();

        // Combat test (all of these will be needed every time there is a fight unless that fight doesnt "level up" Kara)
        System.out.println("Goober: Oi! Were gonna fight now!");
        System.out.println(kName + ": Ok.");
        // I lost 2 lives with a "balanced" character...
        lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Goober", 100, 10);
        level = levelUp(kName, level);
        kMaxHealth += 10;
        kHealth = kMaxHealth;
        skills = increaseSkills(kName, skills);
        damageMultipliers = increaseDamage(kName, damageMultipliers);


        // Shop test (Might need a method for all of this but everything I tried needed global variables)
        System.out.println(kName + ": Theres a shop ahead. I hope I have enough money...\n");
        System.out.print("~");
        if (playerSelection().equals("motherlode"))
            schmeeps += 100000;

        // List of items available for purchase
        itemsForSale[0] = "Air Guitar";
        itemsForSale[1] = "Mass Produced Sword";
        itemsForSale[2] = "Baseball Bat";
        itemsForSale[3] = "Thermobaric Anti-Personel Rocket Launcher";
        itemsForSale[4] = "Plate Armour";

        // Prices for each item
        itemCost[0] = 10;
        itemCost[1] = 50;
        itemCost[2] = 40;
        itemCost[3] = 1000000;
        itemCost[4] = 10000;

        System.out.println(kName + " enters a small shop.");
        System.out.println("Mu'Guffin: Buy something. Or dont.");

        System.out.println("This is what I sell...\n");

        // Skill check to lower the prices
        if (skills[1] >= 40) {
            System.out.println(kName + ": Im not paying that much!");
            System.out.println("Mu'Guffin: Oh no!");
            itemCost[0] = 1;
            itemCost[1] = 5;
            itemCost[2] = 4;
            itemCost[3] = 100000;
            itemCost[4] = 1000;
        } else if (skills[1] >= 10) {
            System.out.println(kName + ": Why dont we negotiate?");
            System.out.println("Mu'Guffin: Hmmm. Ok.");
            itemCost[0] = 1;
            itemCost[1] = 30;
            itemCost[2] = 15;
            itemCost[3] = 250000;
            itemCost[4] = 5000;
        } else {
            System.out.println(kName + ": Can you lower the prices?");
            System.out.println("Mu'Guffin: No.");
        }

        System.out.println(kName + "'s Schmeeps: " + schmeeps + "\n");
        // Displays the list of items
        for (int i = 0; i < 5; i++) {
            System.out.println((i + 1) + ". " + itemsForSale[i] + " (" + itemCost[i] + ")");
        }

        // Gives Kara their purchased item and "pays" the shop owner
        switch (playerSelection()) {
            case "1": schmeeps = (schmeeps >= itemCost[0])? schmeeps -= 10: schmeeps; break;
            case "2":
                if (schmeeps >= itemCost[1]) {
                    schmeeps -= itemCost[1];
                    kWeapon = "Sword";
                    kDamage = 13;
                    kDmgType = "Sharp";
                } else {
                    System.out.println("Mu'Guffin: Brokie. Git outta 'ere!");
                }
                break;
            case "3":
                if (schmeeps >= itemCost[2]) {
                    schmeeps -= itemCost[2];
                    kWeapon = "Baseball Bat";
                    kDamage = 11;
                    kDmgType = "Blunt";
                } else {
                    System.out.println("Mu'Guffin: Brokie. Git outta 'ere!");
                }
                break;
            case "4":
                if (schmeeps >= itemCost[3]) {
                    schmeeps -= itemCost[3];
                    kWeapon = "Thermobaric Anti-Personel Rocket Launcher";
                    kDamage = 300;
                    kDmgType = "Elemental";
                } else {
                    System.out.println("Mu'Guffin: Brokie. Git outta 'ere!");
                }
                break;
            case "5":
                if (schmeeps >= itemCost[4]) {
                    schmeeps -= itemCost[4];
                    kArmour = "Plate Armour";
                    kDmgRes = 1.8;
                } else {
                    System.out.println("Mu'Guffin: Brokie. Git outta 'ere!");
                }
                break;
            default: System.out.println("Mu'Guffin: Git out if you aint buyin' nun!");
        }
        clearConsole();


        // Two enemy attack test
        System.out.println("Goofy Fella: Im gonna stab ya!");
        System.out.println("Silly Fella: And Im gonna wait patiently here. Surely nothing bad happens to my friend.");
        System.out.println(kName + ": What?");

        lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Goofy Fella", 50, 5);

        System.out.println("Silly Fella: You killed my buddy! Now Im going to stab you... with a gun!");

        lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Silly Fella", 150, 20);
        level = levelUp(kName, level);
        kMaxHealth += 10;
        kHealth = kMaxHealth;
        skills = increaseSkills(kName, skills);
        damageMultipliers = increaseDamage(kName, damageMultipliers);
        stabbasRep -= 2;

        // Reputation test
        System.out.println(kName + " has made some enemies...\nShould " + kName + " join a gang for safety?");
        System.out.println("1. Join the shoottas\n2. Call the cops\n");

        switch (playerSelection()) {
            case "1":
                if (oldJob == "Dealer") {
                    System.out.println("Big Shootta: Haha! Look who came back boys.");
                    System.out.println("Dont worry " + kName + " you're still like family to us.");
                    shoottasRep += 5;
                } else {
                    System.out.println("Big Shootta: Dont worry kid well keep you safe...");
                    System.out.println("But we gotta make sure you're not a cop...");

                    lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Cop", 10, 0);
                    System.out.println("Big Shootta: Sloppy work pal... but you're in.");
                    shoottasRep += 3;
                    stabbasRep -= 1;
                    govRep -= 1;
                }

                break;
            case "2":
                System.out.println("Operator: So you killed a gang member in the slums and you want us to help?");
                System.out.println(kName + ": Yup!");
                System.out.println("Operator: Sorry. We cant help you right now.");
                shoottasRep -= 3;
                stabbasRep -= 3;
                break;
            default: System.out.println(kName + " didn't do anything about it.");
        }

        System.out.println("DEBUG{REPUTATION GOV:" + govRep + ", STAB:" + stabbasRep + ", SHOOT:" + shoottasRep + "}");
        clearConsole();

        // Reputation check
        if (shoottasRep < 0 && stabbasRep < 0) {
            System.out.println(kName + " got jumpped in an allyway by multiple people!");

            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);
            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);
            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);

            level = levelUp(kName, level);
            kMaxHealth += 10;
            kHealth = kMaxHealth;
            skills = increaseSkills(kName, skills);
            damageMultipliers = increaseDamage(kName, damageMultipliers);

            System.out.println("Unfortunately... " + kName + " pissed off more than one gang!");

            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Shootta", 100, 20);
            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Shootta", 100, 20);
        } else if (shoottasRep > 0 && stabbasRep < 0) {
            System.out.println(kName + " got jumped in an allyway by multiple people!");

            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);

            System.out.println("A few Shoottas heard the commotion, and picked off the rest.");
        } else if (stabbasRep < 0) {
            System.out.println("Stabba: Shanka sends his regards!\n");
            System.out.println(kName + " got stabbed walking down the street!");
            kHealth -= 10;
            System.out.println("Health: " + kHealth + "\n");
            System.out.println(kName + ": Ouch. Somebody help me!");
            System.out.println("Bystander: Nah you're good.");
        } else {
            System.out.println(kName + " carried on with their day.");
        }

        if (kName.equals("D. Bugger")) {
            System.out.println("Ad Min: Why dont you pick on someone your own size!");
            lives = combat(kName, kHealth, kMaxHealth, kDamage, kDmgRes, kDmgType, skills, damageMultipliers, luck, lives, "Ad Min", 10000, 100);
        }

        System.out.println("\n\nThats it for now. Thanks for playing :)\n\n");
    }
}
