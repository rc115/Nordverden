/* 
* Rigoberto Castro
* Roberto Mata
* Jennifer Millan
* Delil Tursun
* Kanishq Viradiya
* 
* CS2011 Final: Text Based Adventure Game
* {Temp} Project Name: Nekomura Slums
*
*    _____   __    ______                                        
*    ___  | / /_______  /______________ _______  ______________ _
*    __   |/ /_  _ \_  //_/  __ \_  __ `__ \  / / /_  ___/  __ `/
*    _  /|  / /  __/  ,<  / /_/ /  / / / / / /_/ /_  /   / /_/ / 
*    /_/ |_/  \___//_/|_| \____//_/ /_/ /_/\__,_/ /_/    \__,_/  
*                                         ______             
*                                        / __/ /_ ____ _  ___
*                                       _\ \/ / // /  ' \(_-<
*                                      /___/_/\_,_/_/_/_/___/
*
* Ascii art generated by: https://www.patorjk.com/software/taag/#p=display&f=Speed&t=Nekomura
*
* Inspirations: Fallout 1 & 2 by Interplay, TES: Skyrim by Bethesda
* 
*/



import java.util.Scanner;
import java.util.Random;



public class NekomuraSlums {

    static Scanner input = new Scanner(System.in);
    static Random rand = new Random();

    public static void main(String args[]){

        /*
        System.out.println(
            "\n"
          + "\n    Welcome to"
          + colour(
            "\n    _____   __    ______                                          "
          + "\n    ___  | / /_______  /______________ _______  ______________ _  "
          + "\n    __   |/ /_  _ \\_  //_/  __ \\_  __ `__ \\  / / /_  ___/  __ `/  "
          + "\n    _  /|  / /  __/  ,<  / /_/ /  / / / / / /_/ /_  /   / /_/ /   "
          + "\n    /_/ |_/  \\___//_/|_| \\____//_/ /_/ /_/\\__,_/ /_/    \\__,_/    "
          , "CYAN")
          + colour(
            "\n                                         ______                   "
          + "\n                                        / __/ /_ ____ _  ___      "
          + "\n                                       _\\ \\/ / // /  ' \\(_-<      "
          + "\n                                      /___/_/\\_,_/_/_/_/___/      "
          , "PURPLE")
          + "\n                                       Version 0.006.112224"
          + "\n" 
        );
        */
        System.out.println(
            "\n"
          + "\n    Welcome to"
          + colour(
              "\n   _____________       "
            + "\n   ___  __/__  /______ "
            + "\n   __  /  __  __ \\  _ "
            + "\n   _  /   _  / / /  __/"
            + "\n   /_/    /_/ /_/\\___/ "
            + "                    "
          , "CYAN")
          + colour(
            "\n                ______                   "
          + "\n               / __/ /_ ____ _  ___      "
          + "\n              _\\ \\/ / // /  ' \\(_-<      "
          + "\n             /___/_/\\_,_/_/_/_/___/      "
          , "PURPLE")
          + "\n              Version 0.007.113024"
          + "\n" 
        );


    // __________________________________________________ varHell __________________________________________________

        // Character Variables:
        String cName = "";
        boolean nameSet = false;
        String response;

        int cHealth = 100;
        int cMaxHealth = 100;
        int level = 1;
        int lives = 9;
        int[] skills = new int[4];
        double[] damageMultipliers = new double[4];
        String background = "Unemployed";
        int luck = 0;
        int money = 0;
        String location = "";
        boolean inShop = false;

        // Combat Variables
        String cWeapon = "Fists";
        String cDmgType = "Blunt";
        int cDamage = 5;
        String armour = "Clothes";
        double cDmgRes = 0.5;

        // Merchant variables
        String[] itemsForSale = new String[5];
        int[] itemCost = new int[5];

        // Reputation variables (a group/gang will attack the character if their reputation is too low)
        // These should also be able to fit in a list I just wanted to visualize it better
        int govRep = 0;
        // Gangs (names can change)
        int stabbasRep = 0;
        int shoottasRep = 0;
        boolean isRat = false;

        // Faces for talkingCats() Method
        final String[] TEMPLATE = {
            "      ____________    ",
            "     /            \\   ",
            "    |             |   ",
            "    |             |   ",
            "    |             |   ",
            "    \\____________/    "
        };

        final String[] L_CLOSED = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /  _     _  \\   ",
            "    |   o     o   |   ",
            "    |      >      |   ",
            "    |     ___     |   ",
            "    \\____________/    "
        };

        final String[] L_OPEN = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /  _     _   \\   ",
            "    |   o     o   |   ",
            "    |      >      |   ",
            "    |      O      |   ",
            "    \\____________/    "
        };

        final String[] SLEEP = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /            \\   ",
            "    |  __     __  |   ",
            "    |      v      |   ",
            "    |     ___     |   ",
            "    \\____________/    "
        };

        final String[] BLUSH = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /  _     _  \\   ",
            "    |   >     <   |   ",
            "    |  ... v ...  |   ",
            "    |    -_-_-    |   ",
            "    \\____________/    "
        };

        final String[] SMOL = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /            \\   ",
            "    |             |   ",
            "    |      .   .  |   ",
            "    |        __   |   ",
            "    \\____________/    "
        };

        final String[] R_CLOSED = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /            \\   ",
            "    |   o     o   |   ",
            "    |      <      |   ",
            "    |     ___     |   ",
            "    \\____________/    "
        };

        final String[] R_OPEN = {
            "       /\\      /\\     ",
            "      /  \\____/  \\    ",
            "     /            \\   ",
            "    |   o     o   |   ",
            "    |      <      |   ",
            "    |      O      |   ",
            "    \\____________/    "
        };

        boolean glinks = false; // Quest variable for unlockable drink

    // __________________________________________________  varHell __________________________________________________



    // __________________________________________________ Character Creator __________________________________________________

        // While loop runs until player chooses character's name
        while (!nameSet) {
            System.out.println("\n____________________________________________________________________________________________________\n");
            System.out.print("What is your character's name: ");
    
            String newName = input.nextLine(); // Takes player's input for character's name
            cName = newName;
    
            System.out.println("\n" + colour(cName, "GREEN") + " will be your character's name throuout the game.\n"
                + "\n1. Confirm name\n2. Change name\n"
            );
    
            switch (playerSelection()) {
                case "2":
                    System.out.print("Clearing name...");
                    input.nextLine(); // Clears input to make room for new name
                    break;
                default: nameSet = true;
            }
        }

        skills = setSkills(skills);
        damageMultipliers = setDamageMultipliers(damageMultipliers);

        System.out.println("\n____________________________________________________________________________________________________\n");
        System.out.print("What was your character's occupation:\n");
        System.out.println("\n1. Sushi Chef\n2. Steel Worker\n3. Farmer\n4. Catnip Dealer\n5. CEO\n");
    
        switch (playerSelection()) {
            case "1":
                background = "Sushi";
                break;
            case "2":
                background = "Steel";
                break;
            case "3":
                background = "Farmer";
                break;
            case "4":
                background = "Dealer";
                break;
            case "5":
                background = "CEO";
                break;
            default:
                background = "Unemployed";
        }

        if (background.equals("Sushi")) {
            skills[1] += 10;
            money = 100;
            cWeapon = "Cleaver";
            cDamage = 11;
            cDmgType = "Sharp";
        } else if (background.equals("Steel")) {
            skills[0] += 10;
            money = 250;
            cWeapon = "Steel Pipe";
            cDamage = 10;
        } else if (background.equals("Farmer")) {
            skills[2] += 10;
            money = 50;
            cWeapon = "Pesticide Sprayer";
            cDamage = 8;
            cDmgType = "Elemental";
        } else if (background.equals("Dealer")) {
            skills[3] += 10;
            money = 50;
            cWeapon = "9mm";
            cDamage = 9;
            cDmgType = "Ranged";
        } else if (background.equals("CEO")) {
            luck = 1;
            money = 10000;
        }

        clearConsole(1000);

        // Debugging character
        if (cName.equals("D. Bugger")) {
            skills[0] = 100;
            skills[1] = 100;
            skills[2] = 100;
            skills[3] = 100;
            damageMultipliers[0] = 3.0;
            damageMultipliers[1] = 3.0;
            damageMultipliers[2] = 3.0;
            damageMultipliers[3] = 3.0;
            money = 1000000;
            luck = 10;
            cWeapon = "Dragonn KLR 20mm Anti-Matiriel Rifle";
            cDamage = 100;
            cDmgType = "Ranged";
            armour = "T-Shirt and Jorts";
            cDmgRes = 3.0;
            System.out.println(cName + " ready.");
        }



    // __________________________________________________ Debugging & Testing Area __________________________________________________
        if(args.length != 0 && args[0].equals("-admin")) {
            clearConsole(3000);

            System.out.println("\n\nEntering debug area...\n\n");

            System.out.println(colour(
                "CHARACTER STATS:\n\n"
                + "NAME: " + cName + "\n"
                + "HEALTH: " + cHealth + "/" + cMaxHealth + "\n"
                + "LEVEL: " + level + "\n"
                + "LIVES: " + lives + "\n"
                + "LUCK: " + luck + "\n"
                + "money: " + money + "\n\n"
                + "SKILLS:\n"
                + "Strength (" + skills[0] + ")\n"
                + "Speech (" + skills[1] + ")\n"
                + "Stamina (" + skills[2] + ")\n"
                + "Sneak (" + skills[3] + ")\n\n"
                + "DMG MULT:\n"
                + "Sharp (" + damageMultipliers[0] + ")\n"
                + "Blunt (" + damageMultipliers[1] + ")\n"
                + "Elemental (" + damageMultipliers[2] + ")\n"
                + "Ranged (" + damageMultipliers[3] + ")\n\n"
                + "WEAPON: " + cWeapon + "\n"
                + "DAMAGE: "+ cDamage +"\n"
                + "DAMAGE TYPE: " + cDmgType + "\n\n"
                + "ARMOUR: " + armour + "\n"
                + "DAMAGE RESISTANCE: " + cDmgRes + "\n\n"
                , "CYAN"));

            clearConsole(5000);

            // Combat test (all of these will be needed every time there is a fight unless that fight doesnt "level up" character)
            // Coloured text test might change depending on how were taught in class
            System.out.println(colour("Goober: Oi! Were gonna fight now!", "RED"));
            System.out.println(colour(cName + ": Ok.", "GREEN"));
            lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Goober", 100, 10);
            level = levelUp(cName, level);
            cMaxHealth += 10;
            cHealth = cMaxHealth;
            skills = increaseSkills(cName, skills);
            damageMultipliers = increaseDamage(cName, damageMultipliers);


            // Shop test (Might need a method for all of this but everything I tried needed global variables)
            System.out.println(colour(cName + ": Theres a shop ahead. I hope I have enough money...\n", "GREEN"));
            System.out.print("~");
            if (playerSelection().equals("motherlode"))
                money += 100000;

            // List of items available for purchase
            itemsForSale[0] = "Air Guitar";
            itemsForSale[1] = "Mass Produced Sword";
            itemsForSale[2] = "Baseball Bat";
            itemsForSale[3] = "Thermobaric Anti-Personel Rocket Launcher";
            itemsForSale[4] = "Plate Armour";

            // Prices for each item
            itemCost[0] = 10;
            itemCost[1] = 50;
            itemCost[2] = 40;
            itemCost[3] = 1000000;
            itemCost[4] = 10000;

            System.out.println(cName + " enters a small shop.");
            System.out.println(colour("\nMu'Guffin: Buy something. Or dont.", "YELLOW"));

            // Skill check to lower the prices
            if (skills[1] >= 40) {
                System.out.println(colour(cName + ": Im not paying that much!", "GREEN"));
                System.out.println(colour("Mu'Guffin: Oh no!", "YELLOW"));
                itemCost[0] = 1;
                itemCost[1] = 5;
                itemCost[2] = 4;
                itemCost[3] = 100000;
                itemCost[4] = 1000;
            } else if (skills[1] >= 10) {
                System.out.println(colour(cName + ": Why dont we negotiate?", "GREEN"));
                System.out.println(colour("Mu'Guffin: Hmmm. Ok.", "YELLOW"));
                itemCost[0] = 1;
                itemCost[1] = 30;
                itemCost[2] = 15;
                itemCost[3] = 250000;
                itemCost[4] = 5000;
            } else {
                System.out.println(colour(cName + ": Can you lower the prices?", "GREEN"));
                System.out.println(colour("Mu'Guffin: No.", "YELLOW"));
            }

            inShop = true;
            while (inShop) {

                System.out.println("\n" + cName + "'s money: " + money + "\n");
                System.out.println(colour("\nMu'Guffin: This is what I sell...\n", "YELLOW"));

                // Displays the list of items
                for (int i = 0; i < 5; i++) {
                    System.out.println((i + 1) + ". " + itemsForSale[i] + " (" + itemCost[i] + ")");
                }
                System.out.println("\n'e' Leave Shop\n");

                // Gives character their purchased item and "pays" the shop owner
                switch (playerSelection()) {
                    case "e": 
                        System.out.println(colour("Mu'Guffin: Bye. Dont come back 'ere.", "YELLOW"));
                        inShop = false;
                        continue;
                    case "1": money = (money >= itemCost[0])? money -= 10: money; break;
                    case "2":
                        if (money >= itemCost[1]) {
                            money -= itemCost[1];
                            cWeapon = "Sword";
                            cDamage = 13;
                            cDmgType = "Sharp";
                            System.out.println(colour("Mu'Guffin: Thats a #1 seller.", "YELLOW"));
                        } else {
                            System.out.println(colour("Mu'Guffin: Brokie. Git outta 'ere!", "YELLOW"));
                        }
                        break;
                    case "3":
                        if (money >= itemCost[2]) {
                            money -= itemCost[2];
                            cWeapon = "Baseball Bat";
                            cDamage = 11;
                            cDmgType = "Blunt";
                            System.out.println(colour("Mu'Guffin: Good whacker if you need to whack.", "YELLOW"));
                        } else {
                            System.out.println(colour("Mu'Guffin: Brokie. Git outta 'ere!", "YELLOW"));
                        }
                        break;
                    case "4":
                        if (money >= itemCost[3]) {
                            money -= itemCost[3];
                            cWeapon = "Thermobaric Anti-Personel Rocket Launcher";
                            cDamage = 300;
                            cDmgType = "Elemental";
                            System.out.println(colour("Mu'Guffin: You dont need allat for street cats.", "YELLOW"));
                        } else {
                            System.out.println(colour("Mu'Guffin: Brokie. Git outta 'ere!", "YELLOW"));
                        }
                        break;
                    case "5":
                        if (money >= itemCost[4]) {
                            money -= itemCost[4];
                            armour = "Plate Armour";
                            cDmgRes = 1.8;
                            System.out.println(colour("Mu'Guffin: That'll stop a train!", "YELLOW"));
                        } else {
                            System.out.println(colour("Mu'Guffin: Brokie. Git outta 'ere!", "YELLOW"));
                        }
                        break;
                    default: System.out.println(colour("Mu'Guffin: Git out if you aint buyin' nun!", "YELLOW"));
                }
                clearConsole(1000);
            }

            // Two enemy attack test
            System.out.println(colour("Goofy Fella: Im gonna stab ya!", "RED"));
            System.out.println(colour("Silly Fella: And Im gonna wait patiently here. Surely nothing bad happens to my friend.", "RED"));
            System.out.println(colour(cName + ": What?", "GREEN"));

            lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Goofy Fella", 50, 5);

            System.out.println(colour("Silly Fella: You killed my buddy! Now Im going to stab you... with a gun!", "RED"));

            lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Silly Fella", 150, 20);
            level = levelUp(cName, level);
            cMaxHealth += 10;
            cHealth = cMaxHealth;
            skills = increaseSkills(cName, skills);
            damageMultipliers = increaseDamage(cName, damageMultipliers);
            stabbasRep -= 2;

            // Reputation test
            System.out.println(colour(cName, "GREEN") + " has made some " + colour("enemies", "RED") + "...\nShould " + cName + " join a " + colour("gang", "BLUE") + " for safety?");
            System.out.println("1. Join the shoottas\n2. Call the cops\n");

            switch (playerSelection()) {
                case "1":
                    if (background == "Dealer") {
                        if (isRat) {
                            System.out.println(colour("Big Shootta: You think you can come crawling back after what you did?\nSnowball! Take this piece of shit to the box.", "RED"));
                            System.out.println("\n\n" + cName + " was tortured for ratting on the shoottas...");
                            lives -= 2;
                            System.out.println("Lives left: " + lives);
                        } else {
                            System.out.println(colour("Big Shootta: Haha! Look who came back boys.\nYou're like family " + cName + ", you kept your mouth shut and we owe you.", "BLUE"));
                            shoottasRep += 5;
                        }
                    } else {
                        System.out.println(colour("Big Shootta: Dont worry kid well keep you safe...\nBut we gotta make sure you're not a cop...", "PURPLE"));

                        lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Detective", 10, 0);
                        System.out.println(colour("Big Shootta: Sloppy work pal... but you're in.", "BLUE"));
                        shoottasRep += 3;
                        stabbasRep -= 1;
                        govRep -= 1;
                    }

                    break;
                case "2":
                    System.out.println(colour(cName + ": HELP! There's a gang after me because I killed one of their members!", "GREEN"));
                    System.out.println(colour("Operator: So you killed a gang member in the slums and you want us to help?", "PURPLE"));
                    System.out.println(colour(cName + ": Yup!", "GREEN"));
                    System.out.println(colour("Operator: Sorry. We cant do anything about it.", "RED"));
                    shoottasRep -= 3;
                    stabbasRep -= 3;
                    break;
                default: System.out.println(cName + " didn't do anything about it.");
            }

            System.out.println(colour("\nDEBUG{REPUTATION GOV:" + govRep + ", STAB:" + stabbasRep + ", SHOOT:" + shoottasRep + "}", "CYAN"));
            clearConsole(5000);

            // Reputation check
            if (shoottasRep < 0 && stabbasRep < 0) {
                System.out.println(colour(cName, "GREEN") + " got jumpped in an allyway by multiple people!");

                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);
                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);
                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);

                level = levelUp(cName, level);
                cMaxHealth += 10;
                cHealth = cMaxHealth;
                skills = increaseSkills(cName, skills);
                damageMultipliers = increaseDamage(cName, damageMultipliers);

                System.out.println(colour("Unfortunately... " + cName + " pissed off more than one gang!", "RED"));

                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Shootta", 100, 20);
                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Shootta", 100, 20);
            } else if (shoottasRep > 0 && stabbasRep < 0) {
                System.out.println(colour(cName, "Green") + " got jumpped in an allyway by multiple people!");

                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Stabba", 100, 10);

                System.out.println(colour("A few Shoottas heard the commotion, and picked off the rest.", "BLUE"));
            } else if (stabbasRep < 0) {
                System.out.println(colour("\nStabba: Shanka sends his regards!\n\n", "RED"));
                System.out.println(cName + " got stabbed walking down the street!");
                cHealth -= 10;
                System.out.println("Health: " + cHealth + "/" + cMaxHealth + "\n");
                System.out.println(colour(cName + ": Ouch. Somebody help me!", "GREEN"));
                System.out.println(colour("Bystander: Nah you're good.", "PURPLE"));
            } else {
                System.out.println(cName + " carried on with their day.");
            }

            if (cName.equals("D. Bugger")) {
                System.out.println("Ad Min: Why dont you pick on someone your own size!");
                lives = combat(cName, cHealth, cMaxHealth, cDamage, cDmgRes, cDmgType, skills, damageMultipliers, luck, lives, "Ad Min", 10000, 100);
            }

            // Player talking to a npc example:
            clearConsole(1000);
            talkingCats(L_CLOSED, R_OPEN);
            isSpeaking(colour("Groug", "Cyan"), "Like I was saying though. Isnt it kinda wierd that were cats?");
            clearConsole(3000);

            talkingCats(L_OPEN, R_CLOSED);
            System.out.println(colour("Groug", "Cyan") + ": Like I was saying though. Isnt it kinda wierd that were cats?");
            System.out.print(colour(cName, "Green") + ": ");
            playerSelection();
            clearConsole(2000);

            talkingCats(L_CLOSED, SLEEP);
            isSpeaking(colour("Groug", "Cyan"), "You yap too much bruv...");
            clearConsole(5000);
        }





// __________________________________________________ ACT 1 (Slums) __________________________________________________

    //This section just sets the background for why they end up in the slums of Keji

        clearConsole(0);
        System.out.println(colour("ACT 1:", "CYAN"));

        // Loading message to catch player's attention
        String[] loadingMsg = { 
            "   __                 _ _             \n" +
            "  / /  ___   __ _  __| (_)_ __   __ _ \n" +
            " / /  / _ \\ / _` |/ _` | | '_ \\ / _` |\n" +
            "/ /__| (_) | (_| | (_| | | | | | (_| |\n" +
            "\\____/\\___/ \\__,_|\\__,_|_|_| |_|\\__, |\n" +
            "                                |___/ ",

            "   o   ",
            "o   ",
            "o   ",
            "o   ",
            "o"

        };

        for (String loading : loadingMsg) { 
            System.out.print(colour(loading, "CYAN"));
            pause(1000);
        }

        clearConsole(1000);

        // Sets a custom start and location based on player's choice of job
        if (background.equals("Sushi")) {
            System.out.println(colour("DEBUG{SUSHI CHEF START}", "CYAN"));
        } else if (background.equals("Steel")) { // Steel background by Rigo
            // Steel background by Rigo
            slowTxt(cName + " is a steel factory worker.\n\n\n", 100);

            final String[] LARRY_CLOSED = {
                "       /\\      /\\     ",
                "      /  \\____/  \\    ",
                "     /            \\   ",
                "    |   x     o   |   ",
                "    |      <      |   ",
                "    |     ___     |   ",
                "    \\____________/    "
            };

            final String[] LARRY_OPEN = {
                "       /\\      /\\     ",
                "      /  \\____/  \\    ",
                "     /            \\   ",
                "    |   x     o   |   ",
                "    |      <      |   ",
                "    |      o      |   ",
                "    \\____________/    "
            };

            boolean invited = false;

            talkingCats(L_CLOSED, LARRY_OPEN);
            isSpeaking(colour("Larry", "Purple"), "'Ey " + cName + ", you hear the game over the radio yesterday?\n");

            clearConsole(500);
            talkingCats(L_OPEN, LARRY_CLOSED);
            System.out.print(colour(cName, "Green") + ": ");
            response = playerSelection();

            int pissedOffL = 0;
            if (response.contains("ye") || response.contains("Ye")) {
                pissedOffL -= 1;
                isSpeaking(colour("\nLarry", "Blue"), "Pretty good right.\n");

                clearConsole(400);
                talkingCats(L_OPEN, LARRY_CLOSED);
                System.out.print(colour(cName, "Green") + ": ");
                response = playerSelection();
    
                clearConsole(500);
                talkingCats(L_CLOSED, LARRY_OPEN);

                if (response.contains("ye") || response.contains("Ye")) {
                    pissedOffL += 2;
                    isSpeaking(colour("\nLarry", "Purple"), "Hmph. Right.\n");
                } else if (response.contains("no") || response.contains("No") || response.contains("nah") || response.contains("Nah")) {
                    pissedOffL -= 1;
                    isSpeaking(colour("\nLarry", "Blue"), "Exactly. Was shit but nobody admits it.\n");
                } else {
                    pissedOffL += 1;
                    isSpeaking(colour("\nLarry", "Purple"), "Sure bud.\n");
                }
            } else {
                pissedOffL += 1;
                clearConsole(500);
                talkingCats(L_CLOSED, LARRY_OPEN);
                isSpeaking(colour("\nLarry", "Purple"), "Was shit anyway. What did you do then?\n");

                clearConsole(2000);
                talkingCats(L_OPEN, LARRY_CLOSED);                
                System.out.print(colour(cName, "Green") + ": ");
                response = playerSelection();

                if (response.contains("drink") || response.contains("gambl") || response.contains("Jorkin It")) {
                    pissedOffL -= 3;
                    clearConsole(500);
                    talkingCats(L_CLOSED, LARRY_OPEN);
                    isSpeaking(colour("\nLarry", "Blue"), "Hell yeah! You're not that bad then.\n");

                    if (response.contains("drink")) {
                        isSpeaking(colour("\nLarry", "Blue"), "Ohh you drink yea? Me and the lads are going to the pub after the last shift.\n"
                        + "Why dont you stay for a few hours after you're out and come with us.\n");
                        isSpeaking(colour(cName, "Green"), "Sure\n");
                        invited = true;
                    }

                    if (response.contains("gambl")) {
                        isSpeaking(colour("\nLarry", "Blue"), "Do you wanna roll some dice?.\n");

                        clearConsole(2000);
                        talkingCats(L_OPEN, LARRY_CLOSED);
                        slowTxt("\n1. \"" + colour(cName, "Green") + ": Sure\"\n2. \"" + colour(cName, "Green") + ": No thanks\"\n\n", 100);

                        switch (playerSelection()) {
                            case "1":
                                isSpeaking(colour("\n" + cName, "Green"), "Sure how do I play?\n");

                                clearConsole(2000);
                                talkingCats(L_CLOSED, LARRY_OPEN);
                                isSpeaking(colour("\nLarry", "Blue"), "Just put a bet in and if you match 2 or all 3 of your dice you win.\n"
                                    + "If you win you get two to three times your bet,\n"
                                    + "unless your opponent has matching dice too.\n"
                                    + "If your opponent has a higher bet than you, you have to pay a 15 doubloon fee.\n"
                                    + "To end it, just put in 0 as a bet or lose all your money.\n"
                                );

                                clearConsole(3000);
                                talkingCats(L_OPEN, LARRY_CLOSED);
                                isSpeaking(colour(cName, "Green"), "Uhh...\n");

                                clearConsole(1000);
                                talkingCats(L_CLOSED, LARRY_OPEN);
                                isSpeaking(colour("\nLarry", "Blue"), "Alright. How much are you betting, whatever you bet Ill match.\n\n");
                                int bet = 0;
                                boolean validBet = false;

                                System.out.println(cName + "'s money: " + money);
                                do {
                                    System.out.print("\nBet: ");
                                    if (input.hasNextInt()) {
                                        bet = input.nextInt();
                                        if (bet > money) {
                                            System.out.println("\n\nYou cant bet more than " + money + " doubloons!\n\n");
                                            bet = 0;
                                            input.nextLine();
                                        } else {
                                            clearConsole(2000);
                                            talkingCats(L_CLOSED, LARRY_OPEN);
                                            isSpeaking(colour("\nLarry", "Blue"), "Alright then. Ill put in " + bet + " as well.");
                                            money -= bet;
                                            validBet = true;
                                        }
                                    } else {
                                        System.out.println("\n\nThat's not a valid bet!\n\n");
                                        input.nextLine();
                                    }    
                                } while (!validBet);

                                money += dice(cName, bet, "Larry", bet);
                                System.out.println("\n" + cName + "'s money: " + money + "\n\n");

                                clearConsole(2000);
                                talkingCats(L_CLOSED, LARRY_OPEN);
                                isSpeaking(colour("\nLarry", "Blue"), "That was alright. I've been in games that last over 5 hours!\n\n");

                                clearConsole(2000);
                                talkingCats(L_OPEN, LARRY_CLOSED);
                                System.out.print(colour(cName, "Green") + ": ");
                                response = playerSelection();
                    
                                if (response.contains("eat shit") && response.contains("die") || response.contains("kys") || response.contains("fuck you") || response.contains("Fuck you")) {
                                    clearConsole(100);
                                    System.out.println(colour(cName, "Green") + ": " + response);

                                    clearConsole(2000);
                                    talkingCats(L_CLOSED, LARRY_OPEN);
                                    isSpeaking(colour("\nLarry", "red"), "That aint right... Ive been nothing but nice,\n"
                                    + "and then you tell me \"" + response + "\"..."
                                    + "\n\n");

                                    slowTxt("Larry clobbered " + cName + " with a steel pipe.\n\n", 200);
                                    pissedOffL += 10;
                                    int larHitChance = rand.nextInt(4);

                                    if (larHitChance == 3) {
                                        cMaxHealth -= 60;
                                        cHealth -= 86;
                                        slowTxt(cName + " got brain damage!\nThey might be squishier from now on...\n\n", 100);
                                    } else if (larHitChance == 0) {
                                        slowTxt("But Larry missed.\n\n", 100);
                                    } else {
                                        cHealth -= 86;
                                        slowTxt(cName + " did 86 damage!\n\n", 100);
                                    }

                                }
                                break;
                            default:
                                pissedOffL += 5;
                                clearConsole(300);
                                talkingCats(L_OPEN, LARRY_CLOSED);
                                isSpeaking(colour("\n" + cName, "Green"), "Fuck NO! Larry. I don't want to play your silly games. Get back to work.\n");

                                clearConsole(2000);
                                talkingCats(L_CLOSED, LARRY_OPEN);
                                isSpeaking(colour("Larry", "Red"), "Well you didnt have to be rude about it.\n");
                        }
                    }
                } else {
                    pissedOffL += 1;
                    clearConsole(500);
                    talkingCats(L_CLOSED, LARRY_OPEN);
                    isSpeaking(colour("\nLarry", "Red"), "Bit boring.\n");
                }
            }

            clearConsole(500);
            slowTxt("\n" + cName + " went on a 30 minute break...", 100);

            clearConsole(500);
            talkingCats(L_CLOSED, LARRY_OPEN);
            if (pissedOffL < 0) {
                isSpeaking(colour("\nLarry", "Blue"), "Haven't noticed you during my lunch. You part of the new shift?\n");

                clearConsole(500);
                talkingCats(L_OPEN, LARRY_CLOSED);
                isSpeaking(colour(cName, "Green"), "Yeah... Get paid 2 doubloons per day more like this.");

                clearConsole(400);
                talkingCats(L_CLOSED, LARRY_OPEN);
                isSpeaking(colour("\nLarry", "Blue"), "Hmm. You smoke nip?\n");

                clearConsole(500);
                talkingCats(L_OPEN, LARRY_CLOSED);
                System.out.print(colour(cName, "Green") + ": ");
                response = playerSelection();
    
                if (response.contains("ye") || response.contains("Ye")) {
                    isSpeaking(colour("\nLarry", "Blue"), "That wont do. You should take this twice a day.\n");

                    slowTxt("\nLarry hands "+ cName +" a strange looking object...\n", 120);
                    slowTxt("\n1. Take it\n2. Pass\n3. Report Larry\n", 30);

                    switch (playerSelection()) {
                        case "1":
                            pissedOffL += 2;

                            final String[] LARRY_TRIPPING = {
                                "       7\\      7\\     ",
                                "      7  \\----7  \\    ",
                                "     7            \\   ",
                                "    !   k     &   !   ",
                                "    !      ?      !   ",
                                "    !      w      !   ",
                                "    \\------------7    "
                            };
                    
                            final String[] K_TRIPPING = {
                                "       7\\             ",
                                "      7  \\________    ",
                                "     7         \\  \\   ",
                                "    !   @     @ \\/!   ",
                                "    !      )      !   ",
                                "    !    ~~~      !   ",
                                "    \\____________7    "
                            };

                            slowTxt(cName + " took a hit off the wand of everlasting confusion...\n\n", 100);
                            
                            talkingCats(K_TRIPPING, LARRY_TRIPPING);
                            isSpeaking(colour(cName, "Green"), "W-what is that?\n");

                            clearConsole(300);
                            talkingCats(K_TRIPPING, LARRY_TRIPPING);
                            isSpeaking(colour("Larry", "Blue"), "\u2502\u250C\u2510\u2502\u2502\u250C\u2510\u250C\u2510\u250C\u2510\n");
                            
                            clearConsole(300);
                            talkingCats(K_TRIPPING, LARRY_TRIPPING);
                            isSpeaking(colour(cName, "Green"), "Huh\n");
                            
                            clearConsole(300);
                            talkingCats(K_TRIPPING, LARRY_TRIPPING);
                            isSpeaking(colour("Larry", "Blue"), "You're the type to take candy from strangers aren't you...\n");
                            break;
                        case "2":
                            pissedOffL -= 2;
                            isSpeaking(colour("Larry", "Blue"), "Smart. I dunno whats in that.\n");
                            break;
                        case "3":
                            pissedOffL += 5;
                            isSpeaking(colour("Larry", "Blue"), "You're gonna fucking what mate?!\n");
                            cHealth -= 50;
                            slowTxt("\n" + cName + " got clobbered by Larry and lost 50 health!", 100);
                            break;
                        default:
                            slowTxt("\n"+cName+" dropped the yoinky and it broke!\n", 30);
                            isSpeaking(colour("\nLarry", "Red"), "You nincompoop! That cost me 400 doubloons!\n");
                            pissedOffL += 5;
                    }
                } else {
                    isSpeaking(colour("\nLarry", "Blue"), "I didn't have none anyway.\n");
                }

                if (pissedOffL <= 0) {
                    clearConsole(400);
                    talkingCats(L_CLOSED, LARRY_OPEN);
                    isSpeaking(colour("\nLarry", "Blue"), "Anyway... You seem like a chill guy.\nMe and the lads are heading to the pub later.\nWhy dont you join us after you're shift?");

                    clearConsole(2000);
                    talkingCats(L_OPEN, LARRY_CLOSED);                
                    System.out.print(colour(cName, "Green") + ": ");
                    response = playerSelection();
                    System.out.println("");
                    clearConsole(1000);

                    if (response.contains("Ye") || response.contains("ye") || response.contains("Su") || response.contains("su") || response.contains("Al") || response.contains("al")) {
                        invited = true;
                    }

                    clearConsole(400);
                    talkingCats(L_CLOSED, LARRY_OPEN);
                    isSpeaking(colour("\nLarry", "Blue"), "A'right then. Ill see you later.");
                } else {
                    clearConsole(400);
                    talkingCats(SMOL, LARRY_OPEN);
                    isSpeaking(colour("\nLarry", "red"), "You're not that interesting. Im going back to work.");

                    clearConsole(400);
                    talkingCats(SMOL, LARRY_CLOSED);
                    isSpeaking(colour("\n" + cName, "Green"), "Huh...\n");                    
                }
            } else if (pissedOffL > 0) {
                slowTxt(cName + " saw Larry in the cafeteria and tried to start a conversation...", 100);
                talkingCats(L_CLOSED, LARRY_OPEN);
                isSpeaking(colour("\nLarry", "Red"), "My break is over. I have to head back to work.\n");
            }

            clearConsole(1000);
            System.out.println("\n" + cName + "'s shift ended...");


            if (invited) {
                slowTxt("\n" + cName + " was invited to the pub.", 100);

                System.out.println("\n\n1. Go to the pub\n2. Go home\n");
                pause(200);

                switch (playerSelection()) {
                    case "1":
                        slowTxt(cName + " went to Tetanus Tapwater with the lads...", 100);
                        clearConsole(500);
                        talkingCats(SMOL, LARRY_OPEN);
                        isSpeaking(colour("\nLarry", "blue"), "Oi Garry, ya gobswallop. This is " + cName + ", met them in my last shift.");

                        final String[] GARRY = {
                            "       /\\      /\\     ",
                            "      /  \\____/  \\    ",
                            "     /            \\   ",
                            "    |--(G)-_-(G)--|   ",
                            "    |      g      |   ",
                            "    |          3  |   ",
                            "    \\____________/    "
                        };

                        clearConsole(500);
                        talkingCats(L_CLOSED, GARRY);
                        isSpeaking(colour("\nGarry", "purple"), "Good evenin', " + cName + " how many glinks can you gunder?\n");

                        clearConsole(500);
                        talkingCats(L_OPEN, GARRY);
                        System.out.print(colour(cName, "Green") + ": ");
                        response = playerSelection();

                        clearConsole(500);
                        talkingCats(SMOL, GARRY);
                        if (response.contains("what") || response.contains("huh") || response.contains("What") || response.contains("I do not understand") || response.contains("excuse me")) {
                            slowTxt("\n\nGarry pulled out a huge... ", 150);
                            slowTxt("bottle of gin.\n", 100);
                        } else { isSpeaking(colour("\nGarry", "Purple"), "Nah.\n"); }
                        isSpeaking(colour("\nGarry", "Purple"), "Hey Harry! Come gunder this glink and show " + cName + " how its done.");

                        final String[] HARRY = {
                            "       __       /\\     ",
                            "      /  \\____/  \\    ",
                            "     /            \\   ",
                            "    |  __     __  |   ",
                            "    |      H      |   ",
                            "    |    -___     |   ",
                            "    \\____________/    "
                        };

                        clearConsole(500);
                        talkingCats(GARRY, HARRY);
                        isSpeaking(colour("\nHarry", "purple"), "You gotta stop calling it that man... It sounds weird.\n");

                        clearConsole(500);
                        talkingCats(GARRY, HARRY);
                        isSpeaking(colour("\nGarry", "purple"), "Just fucking drink it.\n");

                        slowTxt("\nHarry drank an entire 1 gallon jug of gin.\n", 120);
                        clearConsole(300);
                        slowTxt("\nGarry bought another bottle and handed it to Larry.\n", 100);

                        clearConsole(500);
                        talkingCats(GARRY, HARRY);
                        isSpeaking(colour("\nGarry", "purple"), "Here you go Larold.\n");

                        clearConsole(500);
                        talkingCats(GARRY, LARRY_OPEN);
                        isSpeaking(colour("\nLarry", "blue"), "Call me that again and clob ya.\n");

                        slowTxt("\nLarry drank the other gallon of gin... Then Garry... Then it was " + cName + "'s turn...\n", 100);

                        System.out.println("\n1. Gunder the Glink\n2. Drink something different\n3. Go home\n");
                        response = playerSelection();

                        if (playerSelection().equals("1")) {
                            slowTxt(cName + " drank the entire gallon and instantly passed out.", 100);
                            clearConsole(500);
                            talkingCats(SLEEP, GARRY);
                            isSpeaking(colour("\nGarry", "blue"), "Oof at least 1 is a easy record to beat.\n");
                            clearConsole(500);
                            glinks = true;
                        } else if (playerSelection().equals("2")) {
                            slowTxt(cName + " spent the rest of the night drinking with the Larry, Garry, and Harry.", 100);
                        } else {
                            slowTxt(" got up and went home.", 120);
                            clearConsole(500);
                            talkingCats(GARRY, LARRY_CLOSED);
                            isSpeaking(colour("\nGarry", "red"), "Knew they was a globber.\n");
                            clearConsole(500);
                        }
                        break;
                    default: slowTxt(cName + " decided not to go and went home instead.", 100); 
                }
            } else {
                clearConsole(500);
                slowTxt(cName + " went home and got ready for work the next day.", 100);
            }

            // Steel background written by Rigo
        } else if (background.equals("Farmer")) {
            System.out.println(colour("DEBUG{FARMER START}", "CYAN"));
        } else if (background.equals("Dealer")) { // Dealer background written by Rigo
            // Dealer background written by Rigo
            shoottasRep = 1;
            stabbasRep = -1;

            slowTxt("Sometimes... the streets of Keji have more money flowing than the buisinesses in the center.\n\n", 100);

            isSpeaking(colour("Tweaker", "Purple"), "Yo! I heard you're the plug on this block.\n");
            isSpeaking(colour(cName, "Green"), "Depends on whatchu need brodie.\n");
            isSpeaking(colour("Tweaker", "Purple"), "Lemme get 5 Gs of some Silvervine Sorbet and a 3.5 of Whizker Waltz.\n");
            isSpeaking(colour(cName, "Green"), "Fs its 150 for the Silvervine and 50 for the 8th.\n");
            isSpeaking(colour("Tweaker", "Purple"), "Damn! Whats in the Silvervine?\n");

            if (skills[1] >= 20) {
                isSpeaking(colour(cName, "Green"), "That gas' 80% nepetalactone man. Waltz is only about 30% NTT.\n    Both will get you bonkered tho. Silvervine will just lasts like 3 hours longer.\n");
                isSpeaking(colour("Tweaker", "Blue"), "Ohh ok ok. Yeah ill take it.\n\n");
                System.out.println("The customer paid " + colour(cName, "Green") + " and took their product...");
                money += 200;
            } else {
                isSpeaking(colour(cName, "Green"), "Trust me its worth it.\n");
                isSpeaking(colour("Tweaker", "Red"), "Whatever dude. Just give me the boof.\n\n");
                System.out.println("The "+colour("Tweaker", "RED")+" pulled out a knife!");
                System.out.println("But " + colour(cName, "Green") + " has a gun...\n");
                System.out.println("\n1. Escalate\n2. Diffuse\n");

                switch (playerSelection()) {
                    case "1":
                        isSpeaking(colour(cName, "Green"), "Man ion got time for your shit.\n\n");
                        System.out.println(cName + " popped a cap in his ass!\n");
                        break;
                    default:
                        isSpeaking(colour(cName, "Green"), "The fuck?! Im not tryna ruin my night today. Just take this J and fuck off.\n\n");
                        System.out.println(cName + " gave the tweaker a laced spliff and then he left.\n");
                }
            }

            System.out.println("About 30 minutes pass by... Then a new customer approaches " + colour(cName, "GREEN") + ".");
            clearConsole(3500);

            isSpeaking(colour("Customer", "Purple"), "Hey man! Im trying to find some of that good good!\n");
            isSpeaking(colour(cName, "Green"), "And Im supposed to help how exactly?\n");
            isSpeaking(colour("Customer?", "Purple"), "C'mon man. I know you sell premium catnip.\n");
            System.out.println("\nThe hairs on " + cName + "'s neck rise.\n");
            isSpeaking(colour(cName, "Green"), "I dunno who you think I am, but I dont sell that.\n    Im just enjoying my J on the street. Nothing illegal about that.\n");
            isSpeaking(colour("Customer?", "Purple"), "Hehe. I dont want you to get in trouble.\n    I just want 3 ounces of some Silverwine Sorbet.\n");
            System.out.println("\n1. Sell her 3 ounces\n2. Refuse to sell\n");

            switch (playerSelection()) {
                case "1":
                    isSpeaking(colour(cName, "Green"), "Fine. I dont have enough Silver tho, I can get you 1.5 ounces and 1.5 of Velvet Claw.\n");
                    isSpeaking(colour("Customer", "Purple"), "Dang. Thats fine how much is it for both?\n");
                    isSpeaking(colour(cName, "Green"), "1,260 for the Silvervine and 450 for the Velvet. Ill round it down to 1,700.\n");
                    isSpeaking(colour("Customer", "Red"), "Aww how sweet. Here you go... Thank you!\n");
                    System.out.println("The customer paid " + colour(cName, "Green") + " and took their product...\n");
                    govRep -= 2;
                    money += 1700;
                    break;
                default:
                    isSpeaking(colour(cName, "Green"), "Sorry ma'am I dont sell Silverwine. Theres a dispensary about 15 minutes from here.\n    Maybe they'll sell it to you there.\n");
                    isSpeaking(colour("Customer", "Red"), "Fine you queen. Just letting you know.\n    They already know. They've been on your tail for three months.\n\n");
                    govRep -= 1;
                    System.out.println("The 'customer' hisses at " + colour(cName, "Green") + " and leaves.\n\n");
            }
            
            System.out.println("Not even 5 minutes later, several NBI agents corner " + colour(cName, "Green") + " before they can escape.\n");
            isSpeaking(colour("Fed", "Red"), "Freeze! You are under arrest for distribution of a controled substance\n    and possesion of a deadly weapon. Turn around slowly and keep your hands in the air.\n\n");

            System.out.println(colour(cName, "Green") + " is facing up to 20 years in federal prison.\n");
            System.out.println("\n1. Take a plea deal\n2. Rat out the members of the Shoottas gang\n3. Serve the full sentence\n");

            switch (playerSelection()) {
                case "1":
                    System.out.println("The judge was paid off by the Shoottas and the sentece was reduced to 2 years!");
                    System.out.println("...But " + colour(cName, "Green") + " should stay away from feds once they're back on the street...\n");
                    shoottasRep += 3;
                    break;
                case "2":
                    isRat = true;
                    govRep += 3;
                    shoottasRep -= 10;
                    stabbasRep -= 10;
                    System.out.println(cName + " spent four months in prison but lost all respect with the gangs in the slums.\n");
                    break;
                default:
                    System.out.println("Unfortunately... " + cName + " was stabbed inside of prison by a rival gang and bled out on the floor.\n\n");
                    shoottasRep += 4;
                    lives -= 1;
                    System.out.println("Lives left: " + lives + "\n\n");
                    System.out.println(colour(cName, "Green") + " was released early because they technically served a life sentence!\n");
            }
            // Dealer background written by Rigo
        } else if (background.equals("CEO")) { // CEO background written by Jennifer
            // CEO background written by Jennifer
            int convincing = 0;
            slowTxt(
                "Amid the worn-out, crowded street, this individual stands out from afar,\n"
                + "dressed in a sleek, expensive-looking suit and polished shoes that contrast\n"
                + "sharply with the dirt road beneath them. He scans the area, observing\n"
                + "the people and their surroundings with a keen blend of curiosity and strategic intent.\n"
                + "He stops to chat with a young man resting against a worn-down wall.\n\n"
            , 25);

            isSpeaking(colour(cName, "Green"), "You there... What's your name?\n");
            isSpeaking(colour("Bum", "Purple"), "Depends who's asking. You don't exactly look like you belong around here.\n");

            if (skills[0] >= 20) {
                convincing += 2;
                isSpeaking(colour(cName, "Green"), "I know how to defend myself. And I am here to gift opportunities.\n"
                + "    So I believe I do belong here in a sense.");
            } else {
                isSpeaking(colour(cName, "Green"), "I suppose not. Think of me as an opportunity wrapped in a fancy suit.\n");
            }

            isSpeaking(colour("Bum", "Purple"), "What kind of opportunity are we talking about here?\n");

            if (skills[1] >= 20) {
                convincing += 2;
                isSpeaking(colour(cName, "Green"),"A job, money, warm food, maybe even a better place to live. What more could you want?\n");
                isSpeaking(colour("Bum", "Purple"), "Hmm... Sounds too good to be true whats the catch.");
            } else {
                isSpeaking(colour(cName, "Green"),"I'm looking to hire people like you... 20 doubloons per day, and a on site cafeteria.\n");
                isSpeaking(colour("Bum", "Red"), "(Snarling) People like me? You mean desperate folks ready to break their backs for scraps?\n"
                + "    Yeah, we've heard about your type here... Fancy suit, big promises, and nothing but lies.\n");
                slowTxt("\nThe " + colour("Bum", "Red") + " stood up to " + colour(cName, "Green") + "!\n", 50);

                System.out.println("\n1. Escalate\n2. Diffuse\n");
                switch (playerSelection()) {
                    case "1":
                        convincing -= 2;
                        isSpeaking(colour(cName, "Green"),"You ungrateful feral! I am giving you a new start!\n");
                        break;
                    default:
                        convincing++;
                        isSpeaking(colour(cName, "Green"), "Now, don't be so bitter and ungrateful. Sure, the pay won't make you rich, but it's steady and\n"
                        + "    better than digging through trash for scraps. Let's be honest—who else would even bother hiring you lot besides me?\n");
                        isSpeaking(colour("Bum", "Purple"), "(Muttering) Maybe. But why us? Why here? You could use machines or find better workers.\n");

                        if (skills[3] >= 10) {
                            convincing++;
                            isSpeaking(colour(cName, "Green"), "(Smiling) Believe it or not, this is for you. A way out of this place, a chance at something better.\n"
                            + "    That's all I'm offering.\n");
                            isSpeaking(colour("Bum", "Purple"), "Hmm... Sounds too good to be true whats the catch.");
                        } else {
                            convincing--;
                            isSpeaking(colour(cName, "Green"), "Its quite simple... I rather spend 20 per employee than 200.");
                            isSpeaking(colour("Bum", "Red"), "(Clenching fist) You're good at sweet-talking, I'll give you that.\n"
                            + "    But you're not honest so, what's the catch?\n\n");
                        }
                }
            }

            slowTxt("\n" + cName + " has a few options:\n\n"
                + "1. \"I Just need cheap labour\" (Speech: " + skills[1] + "/30)\n"
                + "2. \"Take it or leave it\" (Speech: " + skills[1] + "/10)\n"
                + "3. \"There is no catch\" (Sneak: " + skills[3] + "/20)\n"
                + "4. \"You need the job\" (Strength: " + skills[0] + "/40)\n\n"
            , 40);

            switch (playerSelection()) {
                case "1":
                    if (skills[1] >= 30) {
                        convincing += 3;
                        isSpeaking(colour(cName, "Green"), "The catch is... that there is no catch! I simply need cheap labour.\n");
                        slowTxt("\nHe looks over his should as if he is talking to someone there.\n\n", 68);
                        isSpeaking(colour("Bum", "Purple"), "Haha! At least this one doesn't try to pretend! Ill tell the boys about you.\n");
                    } else {
                        convincing--;
                        isSpeaking(colour(cName, "Green"), "I simply require cheaper labour.\n");
                        isSpeaking(colour("Bum", "Purple"), "Hmm. At least you're honest.\n");
                    }
                    break;
                case "2":
                    if (skills[1] >= 10) {
                        convincing++;
                        isSpeaking(colour(cName, "Green"), "The catch is simple: take the offer, or stay here.\n"
                        + "    I'm not going to sugarcoat it—this isn't charity; it's business. But it's the kind of business that benefits both of us.\n");
                        isSpeaking(colour("Bum", "Purple"), "You're not bad suit... Ill ask around to see if anyone else is interested.\n");
                    } else {
                        convincing--;
                        isSpeaking(colour(cName, "Green"), "You can either take the job or not.\n");
                        isSpeaking(colour("Bum", "Purple"), "Pfft... Thanks for clearing that up.\n");
                    }
                    break;
                case "3":
                    if (skills[3] >= 20) {
                        convincing += 2;
                        isSpeaking(colour(cName, "Green"), "Thats the thing about working for me. There is no catch at all.\n");
                        isSpeaking(colour("Bum", "Purple"), "Yeah right. Ill ask around to see if anyone believes you.\n");
                    } else {
                        convincing--;
                        isSpeaking(colour(cName, "Green"), "There is no catch.\n");
                        isSpeaking(colour("Bum", "Purple"), "Yup. I bet you're security is just there to keep us safe too.\n");
                    }
                    break;
                case "4":
                    if (skills[0] >= 40) {
                        convincing += 4;
                        isSpeaking(colour(cName, "Green"), "You need this job more than I need you.\n");
                        isSpeaking(colour("Bum", "Purple"), "You're not wrong... I'll round up a few good workers by tomorrow.\n");
                    } else {
                        convincing--;
                        isSpeaking(colour(cName, "Green"), "You need this job.");
                        isSpeaking(colour("Bum", "Purple"), "Pfft... Obviously\n");
                    }
                    break;
                default:
                    isSpeaking(colour(cName, "Green"), "Fine... You got me! My workers just dont want to work here.");
                    break;
            }

            if (convincing >= 4) {
                isSpeaking(colour("Bum", "Purple"), "You really think this one job will turn my life around? Those are some pretty big promises.\n");
                isSpeaking(colour(cName, "Green"), "It won't change everything, but it's a start. Think it over carefully. I'll be back tomorrow to see\n"
                + "    how many others like you are smart enough to take the offer.\n");
            } else if (convincing > 0) {
                isSpeaking(colour("Bum", "Purple"), "You aren't that convincing...\n");
                isSpeaking(colour(cName, "Green"), "Think about it some more over the night, this is a big decision. I will be back tomorrow\n");
            } else if (convincing < 0) {
                isSpeaking(colour("Bum", "Red"), "You shouldn't come back here without you're fancy security...\n");
                isSpeaking(colour(cName, "Green"), "Very well. I will head out now, but I will be back tomorrow, hopefully you've changed your mind by then.\n");
            } else {
                isSpeaking(colour(cName, "Green"), "Think about it over the night. I'll be back tommorrow.\n");
            }

            slowTxt("\n\n"+ cName + " turns away, leaving the individual staring after his retreating figure deep in thought.\n", 68);
            // CEO background written by Jennifer
        } else { // Unemployed background written by Kanishq
            // Unemployed background written by Kanishq
            slowTxt("\n" + cName + " was a skilled programmer, but when the economy crashed, several companies went bankrupt,\n"
            + "and many were laid off. With no savings and no family nearby, "+cName+" quickly ran out of options.\n"
            + "Now, including "+cName+", over ten-thousand live in the slums trying to survive each day\n"
            + "while desperately searching for work to rebuild their life.\n"
            , 50);

            slowTxt("\n"+cName+" sits in a dark alleyway near a small fire, clutching his thin jacket tightly around himself.\n"
            + "A stray cat watches him from a few feet away, its eyes glowing in the dim light.\n\n"
            , 68);

            isSpeaking(colour(cName, "GREEN"), "Another night in the cold... It's funny how quickly life can change.\n"
            + "One day, you're writing code for cutting-edge projects; the next, you're fighting over scraps.\n\n");
            slowTxt(cName + " rubs their hands together to warm them, staring at the flickering flames.\n\n", 100);
            isSpeaking(colour(cName, "GREEN"), "This city doesn't care about people like me. As long as you're useful, you're seen.\n"
            + "Once you're not... you disappear.\n");
            isSpeaking(colour("Cat", "Cyan"), "Meow\n\n");
            slowTxt(cName + " pauses, gazing up at the dark sky, their breath visible in the frigid air.\n\n", 100);
            isSpeaking(colour(cName, "GREEN"), "(sighs) Still, I've got to keep trying. Someone has to be willing to give me a chance.\n"
            + "Even if it's just a small job, I can work my way back.\n");
            isSpeaking(colour("Cat", "Cyan"), "Meow\n\n");
            
            System.out.print(colour(cName, "Green") + ": ");
            switch (playerSelection()) {
                case "Meow":
                    isSpeaking(colour("Cat", "Cyan"), "Thats what I've been saying G.\nYou gotta stop them from deleting history forever!\n");
                    slowTxt("\n"+cName+" rubs their eyes.\n\n", 100);
                default:
                    isSpeaking(colour("Cat", "Cyan"), "Meow\n");
                    isSpeaking(colour(cName, "GREEN"), "Type shit.\n");
            }

            slowTxt("\n"+cName+"'s stomach growls, and they clutch it with a wince.\n\n", 100);
            isSpeaking(colour("Cat", "Cyan"), "Meow\n");
            isSpeaking(colour(cName, "GREEN"), "But first, I need to find food for tomorrow."
            + " I can't think straight on an empty stomach.\n");
            slowTxt("\nThe stray cat lets out a soft meow, stepping a little closer.\n\n", 100);
            isSpeaking(colour(cName, "GREEN"), "(smiles faintly) At least you're here, little one. You and me, huh? Survivors.\n"
            + "Let's hope tomorrow brings something better.\n");
            slowTxt("\n" + cName + " tosses a small crumb from his pocket toward the cat, who sniffs it cautiously before eating.\n"
            + "\nThe fire crackles softly as the night deepens. " + cName + " rests on a old mattress with the cat.", 68);

            pause(3000);
            // Unemployed background written by Kanishq
        }

        Boolean inSlums = true;

        // __________________________________________________ Slums/Act 1 While Loop __________________________________________________
        while (inSlums) {
            clearConsole(1);
            System.out.println("Where should " + cName + " go?\n");
            pause(100);

            slowTxt(
                  "1. {Story Location}\n"
                + "2. Black Market (Shops)\n"
                + "3. Glorbo's Garbage (Shop)\n"
                + "4. Stabbas Territory (Rep: "+stabbasRep+")\n"
                + "5. Shoottas Territory (Rep: "+shoottasRep+")\n"
                + "6. Pub\n\n"
            , 40);

            response = playerSelection();

            // Sets the character's location
            System.out.println("");
            if (response.equals("1")) {
                location = "";
                System.out.println(cName + " is heading to " + location);
            } else if (response.equals("2")) {
                location = "The Factory";
                System.out.println(cName + " is heading to " + location);
            } else if (response.equals("3")) {
                location = "Glorbo's";
                System.out.println(cName + " is heading to " + location);
            } else if (response.equals("4")) {
                location = "Steel Road";
                System.out.println(cName + " is heading to " + location);
            } else if (response.equals("5")) {
                location = "Greysand Avenue";
                System.out.println(cName + " is heading to " + location);
            } else if (response.equals("6")) {
                location = "Tetanus Tapwater";
                slowTxt(cName + " is heading to " + location, 50);
            } else {
                System.out.println("Thats not a valid input for the location. (1-6)");
                continue;
            }



            // __________________________________________________ Slums Locations __________________________________________________

            if (location.equals("")) { // __________________________________________________ {Story Location}

            } else if (location.equals("The Factory")) { // __________________________________________________ Black Market

            } else if (location.equals("Glorbo's")) { // __________________________________________________ Garbage Shop

            } else if (location.equals("Steel Road")) { // __________________________________________________ Faction 1 Area

            } else if (location.equals("Greysand Avenue")) { // __________________________________________________ Faction 2 Area

            } else if (location.equals("Tetanus Tapwater")) { // __________________________________________________ Saloon
                clearConsole(1000);
                slowTxt(cName + " walks into a bar...\n", 40);
                boolean inPub = true;
                int alcLvl = 0;

                do {
                    System.out.println("\n1. Buy a drink\n2. Look at the job board\n3. Leave tavern\n");
                    response = playerSelection();

                    if (response.equals("1")) {
                        String[] drinkMenu = {
                            "Booz's Brew",
                            "'Tequila'",
                            "Uncarbonated Water",
                            "Shine",
                            "Juice"
                        };
                        drinkMenu[4] = (glinks)? "Glink": "Juice";
                        int[] drinksCost = {3,4,5,2,3};

                        String[] drinksBought = shopping(true, cName, "Booz", money, drinkMenu, drinksCost);

                        for (int i = 0; i < 10; i++) {
                            if (drinksBought[i] == null)
                                continue;
                            if (drinksBought[i].equals("Booz's Brew")) {
                                System.out.println(cName + " drank the beer.");
                                alcLvl += 1;
                            } else if (drinksBought[i].equals("'Tequila'")) {
                                System.out.println(cName + " took a shot 'tequila'.");
                                alcLvl += 3;
                            } else if (drinksBought[i].equals("Uncarbonated Water")) {
                                System.out.println(cName + " drank water.");
                                alcLvl -= 2;
                            } else if (drinksBought[i].equals("Shine")) {
                                System.out.println(cName + " drank the liquid.");
                                alcLvl += 2;
                            } else if (drinksBought[i].equals("Juice")) {
                                System.out.println(cName + " juiced.");
                                alcLvl -= 1;
                            } else if (drinksBought[i].equals("Glink")) {
                                System.out.println(cName + " gundered the glink.");
                                alcLvl += 5;
                            }
                        }

                        if (alcLvl >= 10) {
                            slowTxt(cName + " is hammered...\n", 100);

                            clearConsole(1000);
                            talkingCats(L_OPEN, R_CLOSED);
                            isSpeaking(colour(cName, "Green"), "yO-u CaNtnOT! tElL.. me... whEn iVe 'ad eNoUgh\n");

                            clearConsole(1000);
                            talkingCats(L_CLOSED, R_OPEN);
                            isSpeaking(colour("Bouncer", "Red"), "You gotta leave now or youre going to spend a night in the dumpster.\n");

                            if (skills[1] >= 20) {
                                clearConsole(1000);
                                talkingCats(L_OPEN, R_CLOSED);
                                System.out.print(colour(cName, "Green") + ": ");

                                response = playerSelection();
                            } else {
                                clearConsole(1000);
                                talkingCats(L_OPEN, R_CLOSED);
                                isSpeaking(colour(cName, "Green"), "eYeBe cHiIFenDa tHaNgAnIe\n");
                            }

                            clearConsole(1000);
                            talkingCats(L_CLOSED, R_OPEN);
                            isSpeaking(colour("Bouncer", "Red"), "What!?\n");

                            if (skills[1] >= 30) {
                                clearConsole(1000);
                                talkingCats(L_OPEN, R_CLOSED);
                                System.out.print(colour(cName, "Green") + ": ");

                                response = playerSelection();
                                
                                clearConsole(1000);
                                talkingCats(L_CLOSED, R_OPEN);
                                isSpeaking(colour("Bouncer", "Red"), "Just stay out of trouble.\n");
                            } else {
                                clearConsole(1000);
                                talkingCats(L_OPEN, R_CLOSED);
                                isSpeaking(colour(cName, "Green"), "yoR mamAs uh quEen\n");

                                clearConsole(1000);
                                talkingCats(L_CLOSED, R_OPEN);
                                isSpeaking(colour("Bouncer", "Red"), "That does it buster!\n");

                                clearConsole(1000);
                                slowTxt(cName + " was kicked out of the pub.", 100);
                                inPub = false;
                                continue;
                            }
                            
                        } else if (alcLvl >= 5) {
                            slowTxt(cName + " is drunk...\n", 100);

                            clearConsole(1000);
                            talkingCats(L_CLOSED, R_OPEN);
                            isSpeaking(colour("Bouncer", "Red"), "You've had enough pal.\n");

                            clearConsole(1000);
                            talkingCats(L_OPEN, R_CLOSED);
                            isSpeaking(colour(cName, "Green"), "nuH-*burps*-uH\n");
                        } else if (alcLvl >= 1) {
                            slowTxt(cName + " is tipsy...\n", 100);
                        }
                    } else if (response.contains("2")) {

                    } else if (response.contains("3")) {
                        slowTxt(cName + " left and didnt close the door...\n", shoottasRep);
                        inPub = false;
                        
                    }

                    clearConsole(1000);
                } while (inPub);


            }

        }

        // __________________________________________________ Slums/Act 1 While Loop End __________________________________________________





// __________________________________________________ ACT 2 (Downtown) __________________________________________________

    //The character is in the main city ig



// __________________________________________________ ACT 3 (Farm) __________________________________________________

    //This section is the farm section



        System.out.println(colour("\n\nThats it for now. Thanks for playing :)\n\n", "CYAN"));


    }





// ____________________________________________________________________________________________________   Function Junction   ____________________________________________________________________________________________________



// Method for taking the user's input (also gives user more options like quiting)
public static String playerSelection(){
    String pSel = "";
    pSel = input.nextLine();

    if (pSel.equals("clear"))
        clearConsole(1000);
    if (pSel.equals("exit")) {
        System.out.println("\nGoodbye\n");
        input.close();
        clearConsole(1234);
        System.exit(0);
    }

    return pSel;
}

// Method that clears the screen
public static void clearConsole(int ms) {
    pause(ms);

    for (int i = 0; i < 50; i++) {
        System.out.println("\n\n");
    }
}

// Method for colouring the text
public static String colour(String ogTxt, String colour) {
    String newTxt = "";
    if (colour.equalsIgnoreCase("red")) {
        newTxt = "\u001B[31m" + ogTxt + "\u001B[0m";
    } else if (colour.equalsIgnoreCase("green")) {
        newTxt = "\u001B[32m" + ogTxt + "\u001B[0m";
    } else if (colour.equalsIgnoreCase("yellow")) {
        newTxt = "\u001B[33m" + ogTxt + "\u001B[0m";
    } else if (colour.equalsIgnoreCase("blue")) {
        newTxt = "\u001B[34m" + ogTxt + "\u001B[0m";
    } else if (colour.equalsIgnoreCase("purple")) {
        newTxt = "\u001B[35m" + ogTxt + "\u001B[0m";
    } else if (colour.equalsIgnoreCase("cyan")) {
        newTxt = "\u001B[36m" + ogTxt + "\u001B[0m";
    } else if (colour.contains("\u001B")){
        newTxt = colour + ogTxt + "\u001B[0m";
    } else {
        newTxt = ogTxt;
    }

    return newTxt;
}

// Method that pauses for a certain ammount (Based off Youssef's method "pause" only changed long to int because we dont need more than a 596 hr pause)
public static void pause(int ms) {
    try {
        Thread.sleep(ms);
    } catch (InterruptedException e) {}
}

// Method that slows down text chunks (Based off Youssef's method "slowText")
public static void isSpeaking(String name, String text) {
    System.out.print(name + ": ");
    for (int i = 0; i < text.length(); i++) {
        System.out.print(text.charAt(i));
        pause(68);
    }
}

public static void talkingCats(String[] face1, String[] face2) {
    for (int i = 0; i < 7; i++) {
        System.out.print(face1[i]);
        System.out.println(face2[i]);
        pause(10);
    }
}

// Method that slows down text
public static void slowTxt(String text, int speed) {
    for (int i = 0; i < text.length(); i++) {
        System.out.print(text.charAt(i));
        pause(speed);
    }
}

// Method that return a list containing character's skills [0 = Strength, 1 = Speech, 2 = Stamina, 4 = Sneak]
public static int[] setSkills(int[] skills) {
    int skillPts = 50;
    clearConsole(200);

    while (skillPts > 0) {
        clearConsole(300);
        System.out.println("\n\nYou have " + skillPts + " points to spend.");
        System.out.println("What skill would you like to assign 10 points to:\n");
        System.out.println("\n1. Strength ("+skills[0]+")\n2. Speech ("+skills[1]+")\n3. Stamina ("+skills[2]+")\n4. Sneak ("+skills[3]+")\n");

        switch (playerSelection()) {
            case "1":
                skills[0] += 10;
                skillPts -= 10;
                System.out.println("\n10 points have been assigned to Strength.");
                break;
            case "2":
                skills[1] += 10;
                skillPts -= 10;
                System.out.println("\n10 points have been assigned to Speech.");
                break;
            case "3":
                skills[2] += 10;
                skillPts -= 10;
                System.out.println("\n10 points have been assigned to Stamina.");
                break;
            case "4":
                skills[3] += 10;
                skillPts -= 10;
                System.out.println("\n10 points have been assigned to Sneak.");
                break;
            default:
                System.out.println("That's not an option.");
                continue;
        }

        slowTxt("Points Available: " + skillPts, 100);
    }

    clearConsole(200);
    System.out.println("\nThese are your character's skills:");
    System.out.println(
          "Strength (" + skills[0] + ")\n"
        + "Speech (" + skills[1] + ")\n"
        + "Stamina (" + skills[2] + ")\n"
        + "Sneak (" + skills[3] + ")\n"
    );

    System.out.println("Are you happy with these or would you like to change them?");
    System.out.println("\n1. Continue\n2. Reset Skills\n");

    switch (playerSelection()) {
        case "2":
            skills[0] = 0;
            skills[1] = 0;
            skills[2] = 0;
            skills[3] = 0;
            setSkills(skills);
            break;
        default:
            System.out.println("Skills Confirmed!");
            System.out.println("\n____________________________________________________________________________________________________\n");
    }

    return skills;
}

// Method that return a list with Damage Multipliers [0 = Sharp, 1 = Blunt, 2 = Elemental, 4 = Ranged]
public static double[] setDamageMultipliers(double[] damageMultipliers) {
    double dmgPts = 2.0;
    clearConsole(200);

    while (dmgPts > 0) {
        clearConsole(300);
        System.out.println("\n\nYou have " + dmgPts + " points to spend.");
        System.out.println("What damage multiplier would you like to assign 0.5 points to:");
        System.out.println("\n1. Sharp ("+damageMultipliers[0]+")\n2. Blunt ("+damageMultipliers[1]+")\n3. Elemental ("+damageMultipliers[2]+")\n4. Ranged ("+damageMultipliers[3]+")\n");

        switch (playerSelection()) {
            case "1":
                damageMultipliers[0] += 0.5;
                dmgPts -= 0.5;
                System.out.println("\n0.5 points have been assigned to Sharp Damage!");
                break;
            case "2":
                damageMultipliers[1] += 0.5;
                dmgPts -= 0.5;
                System.out.println("\n0.5 points have been assigned to Blunt Damage!");
                break;
            case "3":
                damageMultipliers[2] += 0.5;
                dmgPts -= 0.5;
                System.out.println("\n0.5 points have been assigned to Elemental Damage!");
                break;
            case "4":
                damageMultipliers[3] += 0.5;
                dmgPts -= 0.5;
                System.out.println("\n0.5 points have been assigned to Ranged Damage!");
                break;
            default:
                System.out.println("\n\nThat's not an option.\n\n");
                continue;
        }

        slowTxt("Points Available: " + dmgPts, 100);
    }

    clearConsole(200);
    System.out.println("\nThese are your Damage Multipliers:");
    System.out.println(
          "Sharp (" + damageMultipliers[0] + ")\n"
        + "Blunt (" + damageMultipliers[1] + ")\n"
        + "Elemental (" + damageMultipliers[2] + ")\n"
        + "Ranged (" + damageMultipliers[3] + ")\n"
    );

    System.out.println("Are you happy with these or would you like to change them?");
    System.out.println("\n1. Continue\n2. Reset Damage Multipliers\n");

    switch (playerSelection()) {
        case "2":
            damageMultipliers[0] = 0;
            damageMultipliers[1] = 0;
            damageMultipliers[2] = 0;
            damageMultipliers[3] = 0;
            setDamageMultipliers(damageMultipliers);
            break;
        default:
            System.out.println("Damage Multipliers Confirmed!");
    }

    return damageMultipliers;
}

// Dice rolling method
public static int dice(String cName, int kMoneyIn, String eName, int eMoney) {
    int kBet = 0;
    int eBet = 0;
    int kMoney = kMoneyIn;
    int profLoss = 0;
    boolean betSet = false;
    String[] diceModels = {
          "    _________ \n"
        + "   |         | \n"
        + "   |    o    | \n"
        + "   |         | \n"
        + "    _________ \n",
          "    _________ \n"
        + "   |         | \n"
        + "   |  o   o  | \n"
        + "   |         | \n"
        + "    _________ \n",
          "    _________ \n"
        + "   | o       | \n"
        + "   |    o    | \n"
        + "   |       o | \n"
        + "    _________ \n",
          "    _________ \n"
        + "   | o     o | \n"
        + "   |         | \n"
        + "   | o     o | \n"
        + "    _________ \n",
          "    _________ \n"
        + "   | o     o | \n"
        + "   |    o    | \n"
        + "   | o     o | \n"
        + "    _________ \n",
          "    _________ \n"
        + "   | o     o | \n"
        + "   | o     o | \n"
        + "   | o     o | \n"
        + "    _________ \n",
    };

    while (kMoney > 0) {
        clearConsole(1000);

        if (eMoney <= 0){
            isSpeaking(colour(eName, "Blue"), "Damn. Im all out.\n");
            break;
        }
        eBet = rand.nextInt(eMoney);
        slowTxt("Op's Money: "+ eMoney + "\nOp Bet: " + eBet + "\n", 68);
        slowTxt(cName + "'s' Money: "+ kMoney +"\nBet: ", 68);

        do {
            if (input.hasNextInt()) {
                kBet = input.nextInt();
                if (kBet > kMoney) {
                    isSpeaking(colour(eName, "RED"), "You dont have that much scrap bud.\n\n");
                    input.nextLine();
                    continue;
                }

                if (kBet < eBet) {
                    isSpeaking(colour(eName, "Blue"), "Ahh... your bet is lower than mine, now you have to pay me a 15 doubloon fee.\n\n");
                    kMoney -= 15;
                    eMoney += 15;
                }

                betSet = true;
            } else {
                isSpeaking(colour(eName, "REd"), "Thats not a valid bet...\n\n");
                input.nextLine();
            }
        } while (!betSet);

        if (kBet == 0) {
            isSpeaking(colour(cName, "Green"), "Good game " + eName + ", but I gotta go.\n");
            break;
        }

        slowTxt("3...", 100);
        pause(500);
        slowTxt("2...", 100);
        pause(500);
        slowTxt("1...", 100);
        pause(500);

        int kDice1 = rand.nextInt(6) + 1;
        int kDice2 = rand.nextInt(6) + 1;
        int kDice3 = rand.nextInt(6) + 1;

        int eDice1 = rand.nextInt(6) + 1;
        int eDice2 = rand.nextInt(6) + 1;
        int eDice3 = rand.nextInt(6) + 1;

        slowTxt(
            "\n" + cName + "'s dice: \n\n"
            + diceModels[kDice1 - 1]
            + diceModels[kDice2 - 1]
            + diceModels[kDice3 - 1]

            + "\n\n" + eName + "'s dice: \n\n"
            + diceModels[eDice1 - 1]
            + diceModels[eDice2 - 1]
            + diceModels[eDice3 - 1]
        ,10);

        if (kDice1 == kDice2 && kDice2 == kDice3) {
            if (eDice1 == eDice2 && eDice2 == eDice3) {
                isSpeaking(colour(eName, "Blue"), "HA! What are the chances of that.");
                continue;
            }

            isSpeaking(colour(eName, "Blue"), "Damn.\n\n");
            slowTxt(cName + " won " + kBet*2 + " doubloons!", 100);
            kMoney += kBet*2;
            eMoney -= eBet;
        } else if (kDice1 == kDice2 || kDice2 == kDice3 || kDice3 == kDice1){
            if (eDice1 == eDice2 || eDice2 == eDice3 || eDice3 == eDice1){
                isSpeaking(colour(eName, "Blue"), "Could've been worse.");
                continue;
            }

            isSpeaking(colour(eName, "Blue"), "Damn.\n\n");
            slowTxt(cName + " won " + kBet + " doubloons!", 100);
            kMoney += kBet;
            eMoney -= eBet;
        } else if (eDice1 == eDice2 && eDice2 == eDice3) {

            isSpeaking(colour(eName, "Blue"), "GET SHIT ON!!\n");
            eMoney += eBet*2;
            kMoney -= kBet;
        } else if (eDice1 == eDice2 || eDice2 == eDice3 || eDice3 == eDice1){

            isSpeaking(colour(eName, "Blue"), "Yup!\n");
            eMoney += eBet;
            kMoney -= kBet;
        } else {
            isSpeaking(colour(eName, "Blue"), "Lets run it again no one got anything.\n");
        }
    };
    profLoss = kMoney - kMoneyIn;

    if (profLoss <= 0)
        System.out.println("\n" + cName + " lost " + kMoneyIn + " doubloons!");
    else { System.out.println("\n" + cName + " made " + profLoss + " doubloons!");}

    return kMoney;
}

// Shop method
public static String[] shopping(boolean inShop, String cName, String mName, int money, String[] items, int[] cost) {
    slowTxt("\n" + cName + " is trying to barter with " + mName + "...\n", 100);
    clearConsole(500);
    String[] bought = new String[10];
    int howMany = 0;
    while (inShop) {
        System.out.println("\n" + cName + "'s money: " + money);
        System.out.println("Items Bought: ");
        if (!(bought[0] == null))
            System.out.println("Items Bought: " + bought + "\n");
        pause(500);
        isSpeaking(colour("\n\n" + mName, "YELLOW"), "This is what I sell...\n\n");

        // Displays the list of items
        for (int i = 0; i < 5; i++) {
            System.out.println((i + 1) + ". " + items[i] + " (" + cost[i] + ")");
        }
        System.out.println("\n'e' Leave Shop\n");

        // Gives character their purchased item and "pays" the shop owner
        switch (playerSelection()) {
            case "e": 
                System.out.println(colour(mName + ": Bye.", "YELLOW"));
                inShop = false;
                continue;
            case "1":
                System.out.println(colour(cName + " bought a " + items[0] + ", for " + cost[0] + " doubloons.", "YELLOW"));
                money -= cost[0];
                bought[howMany] = items[0];
                howMany++;
                break;
            case "2":
                System.out.println(colour(cName + " bought a " + items[1] + ", for " + cost[1] + " doubloons.", "YELLOW"));
                money -= cost[1];
                bought[howMany] = items[1];
                howMany++;
                break;
            case "3":
                System.out.println(colour(cName + " bought a " + items[2] + ", for " + cost[2] + " doubloons.", "YELLOW"));
                money -= cost[2];
                bought[howMany] = items[2];
                howMany++;
                break;
            case "4":
                System.out.println(colour(cName + " bought a " + items[3] + ", for " + cost[3] + " doubloons.", "YELLOW"));
                money -= cost[3];
                bought[howMany] = items[3];
                howMany++;
                break;
            case "5":
                System.out.println(colour(cName + " bought a " + items[4] + ", for " + cost[4] + " doubloons.", "YELLOW"));
                money -= cost[4];
                bought[howMany] = items[4];
                howMany++;
                break;
            default: System.out.println(colour(mName + ": I dont sell that.", "YELLOW"));
        }

        clearConsole(1000);
    }

    return bought;
}

// __________________________________________________  Turn Based Combat System  __________________________________________________

/*
* New combat system is heavily dulited compared to Nordverden but still functions as a turn based combat system
* All methods were hand written by Rigo using pieces of Nordverden's TBCS
* Only able to fight 1 enemy at a time with this system
* Leveling up also need to be done manually and there is no level curve
*/

// Method that starts and ends combat also sets lives if the player died
public static int combat(String cName, int cHealth, int cMaxHealth, int cDamage, double cDmgRes, String cDmgType, int[] skills, double[] damageMultipliers, int luck, int lives, String eName, int eHealth, int eDamage) {
    clearConsole(5000);
    // Color Variables
    final String RESET = "\u001B[0m"; // Resets color (needed after every change)
    final String RED = "\u001B[31m"; // Reserved for Enemies
    final String GREEN = "\u001B[32m"; // Reserved for character

    // Combat Variables
    boolean inCombat = true;
    double dmgMult = 0.0;
    int damage = 0;
    int kHitChance = 0;
    int escapeChance = 0;

    int enemyDamage = 0;
    int eHitChance = 0;

    int kRange = 0;
    int turns = 0;

    // Sets ammount of turn based on character's Stamina
    if (skills[2] == 100) {
        turns = 5;
    } else if (skills[2] >= 70) {
        turns = 3;
    } else if (skills[2] >= 40) {
        turns = 2;
    } else {
        turns = 1;
    }

    // Sets damage multiplier based on damage type
    if (cDmgType.equals("Sharp")) {
        dmgMult = damageMultipliers[0];
    } else if (cDmgType.equals("Blunt")) {
        dmgMult = damageMultipliers[1];
    } else if (cDmgType.equals("Elemental")) {
        dmgMult = damageMultipliers[2];
    } else if (cDmgType.equals("Ranged")) {
        dmgMult = damageMultipliers[3];
    }

    // Damage equation (takes damage, multiplies it by the damage multiplier, then adds bonus for strength)
    damage = (int)((cDamage*dmgMult) + (skills[0]/10));

    // Keeps going until character kills the enemy or runs away (both count as a win tho)
    while (inCombat) {
        // Displays character and the enemy's health
        System.out.println(cName + "'s health: " + cHealth + "/" + cMaxHealth);
        System.out.println(eName + "'s health: " + eHealth);


    // character's Turn

        // Give the player the choice to attack or run away
        System.out.println("\n1. Fight\n2. Flee\n");

        switch (playerSelection()) {
            case "1": // If player decides to fight...
                for (int i = 0; i < turns; i++) { // number of attacks determined by stamina
                    kHitChance = rand.nextInt(20) + 1 + luck; // "20 sided die" determines if character's attack hit
 
                    if (kHitChance >= 20) { // character does double damage if a 20 or higher is rolled
                        System.out.println(GREEN + "*CRITICAL HIT*");
                        eHealth -= damage*2;
                        System.out.println(cName + RESET + " hit " + eName + " and did " + damage*2 + " damage!\n");
                    } else if (kHitChance >= 10) { // removes health from enemy (ammount is based on damage)
                        eHealth -= damage;
                        System.out.println(GREEN + cName + RESET + " hit " + eName + " and did " + damage + " damage!\n");
                    } else { // If the dice rolls less than 10 the attack misses
                        System.out.println(GREEN + cName + " missed!\n" + RESET);
                    }

                    // breaks loop if enemy dies before turn ends
                    if (eHealth <= 0)
                        break;
                }

                // Ends combat if enemy's health drops to 0
                if (eHealth <= 0) {
                    System.out.println(GREEN + cName + RESET + " defeated " + RED + eName + RESET + "!\n");
                    inCombat = false;
                    continue;
                }
                break;
            case "2": // If the player tries to run
                escapeChance = rand.nextInt(100) + 1;
                if (escapeChance < (skills[3] + luck*10)) { // Ends combat if character's sneak skill is higher than the escape chance (0-100 roll)
                    System.out.println(cName + " got away safely!\n");
                    inCombat = false;
                    continue;
                } else { // Continues fight if escape chance was too high or if sneak is too low
                    System.out.println(cName + " was not able to get away...\n");
                }
                break;
            default: continue;
        }

    // Enemy's Turn

        // Ranged weapons get a -2 chance to hit character
        kRange = (cDmgType.equals("Ranged"))? 2 : 0;

        // "20 sided die" determines if the enemy's attack hits
        eHitChance = rand.nextInt(20) + 1; 
        eHitChance = (kRange == 2)? eHitChance - 2: eHitChance;

        // Enemy only gets one attack per turn but combat doesn't end unless enemy dies or character runs
        if (eHealth > 0 && eHitChance >= 10) { // If enemy is alive and their attack hit...
            enemyDamage = (eHitChance == 20)? eDamage*2 : (int)(eDamage / cDmgRes);

            if (eHitChance >= 18) { // Ctritical hit chance is lower for enemy so that ranged weapons are too powerful (they still might be)
                System.out.println(RED + eName + " got a critical hit!");
                cHealth -= enemyDamage*2;
                System.out.println(eName + RESET + " attacked " + cName + " and did " + enemyDamage*2 + " damage!\n");
            } else {
                cHealth -= enemyDamage;
                System.out.println(RED + eName + RESET + " attacked " + cName + " and did " + enemyDamage + " damage!\n");
            }

            // Removes a life if the enemy kills character
            if (cHealth <= 0) {
                System.out.println("\n" + RED + cName + " died!\n" + RESET);
                
                lives--;

                // If the player runs out of lives it ends the game (might be too harsh but idk. Maybe we add a way to gain lives)
                if (lives < 0) {
                    System.out.println(cName + " ran out of lives...");
                    System.out.println(cName + "'s journey ended unexpectedly.");
                    clearConsole(9000);
                    input.close();
                    System.exit(1);
                }

                System.out.println(GREEN + "BUT THAT DIDNT STOP " + cName.toUpperCase() + "!\n" + RESET);
                System.out.println("Lives left: " + lives);
                damage += 10;
                cHealth = cMaxHealth;
            }
        } else {
            System.out.println(RED + eName + " missed!\n" + RESET);
        }
    }

    return lives;
}

// Method that starts and ends combat also sets lives if the player died
public static int combatTwo(String cName, int cHealth, int cMaxHealth, int cDamage, double cDmgRes, String cDmgType, int[] skills, double[] damageMultipliers, int luck, int lives, String[] eName, int[] eHealth, int[] eDamage, String aName, int aHealth, int aDamage) {
    clearConsole(5000);
    // Color Variables
    final String RESET = "\u001B[0m"; // Resets color (needed after every change)
    final String ENEMY = "\u001B[31m"; // Reserved for Enemies
    final String ALLY = "\u001B[32m"; // Reserved for character

    // Combat Variables
    boolean inCombat = true;
    boolean fighting = false;
    double dmgMult = 0.0;
    int damage = 0;
    int kHitChance = 0;
    int escapeChance = 0;

    int enemyDamage = 0;
    int eHitChance = 0;

    boolean ranged = (cDmgType.equals("Ranged"))? true : false;
    int turns = 0;

    // Sets ammount of turn based on character's Stamina
    if (skills[2] == 100) {
        turns = 5;
    } else if (skills[2] >= 70) {
        turns = 3;
    } else if (skills[2] >= 40) {
        turns = 2;
    } else {
        turns = 1;
    }

    // Sets damage multiplier based on damage type
    if (cDmgType.equals("Sharp")) {
        dmgMult = damageMultipliers[0];
    } else if (cDmgType.equals("Blunt")) {
        dmgMult = damageMultipliers[1];
    } else if (cDmgType.equals("Elemental")) {
        dmgMult = damageMultipliers[2];
    } else if (cDmgType.equals("Ranged")) {
        dmgMult = damageMultipliers[3];
    }

    // Damage equation (takes damage, multiplies it by the damage multiplier, then adds bonus for strength)
    damage = (int)((cDamage*dmgMult) + (skills[0]/10));

    // Keeps going until character kills the enemy or runs away (both count as a win tho)
    while (inCombat) {
        clearConsole(2000);
        int cSel = 0;
        fighting = false;
        // Displays character and the enemy's health
        System.out.println(colour(cName, ALLY) + "'s health: " + cHealth + "/" + cMaxHealth);
        System.out.println(colour(aName, ALLY) + "'s health: " + aHealth);
        System.out.println(colour(eName[0], ENEMY) + "'s health: " + eHealth[0]);
        System.out.println(colour(eName[1], ENEMY) + "'s health: " + eHealth[1]);
        System.out.println(colour(eName[2], ENEMY) + "'s health: " + eHealth[2]);


        // __________________________________________________ Player's Turn __________________________________________________

        // Give the player the choice to attack or run away
        System.out.println("\n1. "+eName[0]+"\n2. "+eName[1]+"\n3. "+eName[2]+"\n 4. Flee");

        switch (playerSelection()) {
            case "3": cSel++;
            case "2": cSel++;
            case "1": fighting = true; break;
            case "4": // If the player tries to run
                escapeChance = rand.nextInt(100) + 1;
                if (escapeChance < (skills[3] + luck*10)) { // Ends combat if character's sneak skill is higher than the escape chance (0-100 roll)
                    System.out.println(cName + " got away safely!\n");
                    inCombat = false;
                    continue;
                } else { // Continues fight if escape chance was too high or if sneak is too low
                    System.out.println(cName + " was not able to get away...\n");
                }
                break;
            default: continue;
            }

            // __________________________________________________ if they attacked an enemy __________________________________________________
            if (fighting) {
                for (int i = 0; i < turns; i++) { // number of attacks determined by stamina
                    kHitChance = rand.nextInt(20) + 1 + luck; // "20 sided die" determines if character's attack hit

                    if (kHitChance >= 20) { // character does double damage if a 20 or higher is rolled
                        System.out.println(ALLY + "*CRITICAL HIT*");
                        eHealth[cSel] -= damage*2;
                        System.out.println(cName + RESET + " hit " + eName[cSel] + " and did " + damage*2 + " damage!\n");
                    } else if (kHitChance >= 10) { // removes health from enemy (ammount is based on damage)
                        eHealth[cSel] -= damage;
                        System.out.println(ALLY + cName + RESET + " hit " + eName[cSel] + " and did " + damage + " damage!\n");
                    } else { // If the dice rolls less than 10 the attack misses
                        System.out.println(ALLY + cName + " missed!\n" + RESET);
                    }

                    // breaks loop if enemy dies before turn ends
                    if (eHealth[cSel] <= 0)
                        break;
                }            
            }

        pause(300);

        // __________________________________________________ Ally turn __________________________________________________
        if (!(aName.equals(""))) {
            int aHitChance;
            int aTarget;

            aHitChance = rand.nextInt(20) + 1;

            do {
                aTarget = rand.nextInt(3);

                if (eHealth[0] <= 0 && eHealth[1] <= 0 && eHealth[2] <= 0) {
                    System.out.println(ALLY + cName + RESET + " defeated everyone!\n");
                    pause(300);
                    inCombat = false;
                    continue;
                }
            } while (!(eHealth[aTarget] <= 0));

            if (aHitChance >= 20) { // character does double damage if a 20 or higher is rolled
                System.out.println(ALLY + "*CRITICAL HIT*");
                eHealth[aTarget] -= aDamage*2;
                System.out.println(aName + RESET + " hit " + eName[aTarget] + " and did " + aDamage*2 + " damage!\n");
            } else if (aHitChance >= 8) { // removes health from enemy (ammount is based on damage)
                eHealth[aTarget] -= aDamage;
                System.out.println(ALLY + aName + RESET + " hit " + eName[aTarget] + " and did " + aDamage + " damage!\n");
            } else { // If the dice rolls less than 8 the attack misses
                System.out.println(ALLY + aName + " missed!\n" + RESET);
            }
        }

        pause(300);

        // Ends combat if enemy's health drops to 0
        if (eHealth[0] <= 0 && eHealth[1] <= 0 && eHealth[2] <= 0) {
            System.out.println(ALLY + cName + RESET + " defeated everyone!\n");
            pause(300);
            inCombat = false;
            continue;
        }

        // __________________________________________________ Enemy's Turn __________________________________________________

        for (int i = 0; i < 3; i++) {
            slowTxt(colour("\n\n" + eName[i], ENEMY) + " is attacking!\n\n", 75);
            clearConsole(2000);
            // "20 sided die" determines if the enemy's attack hits
            eHitChance = rand.nextInt(20) + 1; 
            eHitChance = (ranged)? eHitChance - 2: eHitChance;

            // Enemy only gets one attack per turn but combat doesn't end unless enemy dies or character runs
            if (eHealth[i] > 0 && eHitChance >= 10) { // If enemy is alive and their attack hit...
                enemyDamage = (eHitChance == 20)? (int)((eDamage[i]*2)/cDmgRes) : (int)(eDamage[i] / cDmgRes);

                if (eHitChance >= 18) { // Ctritical hit chance is lower for enemy so that ranged weapons are too powerful (they still might be)
                    System.out.println(ENEMY + eName[i] + " got a critical hit!");
                    cHealth -= enemyDamage*2;
                    System.out.println(eName[i] + RESET + " attacked " + cName + " and did " + enemyDamage*2 + " damage!\n");
                } else {
                    cHealth -= enemyDamage;
                    System.out.println(ENEMY + eName[i] + RESET + " attacked " + cName + " and did " + enemyDamage + " damage!\n");
                }

                // Removes a life if the enemy kills character
                if (cHealth <= 0) {
                    System.out.println("\n" + ENEMY + cName + " died!\n" + RESET);
                    
                    lives--;

                    // If the player runs out of lives it ends the game (might be too harsh but idk. Maybe we add a way to gain lives)
                    if (lives < 0) {
                        System.out.println(cName + " ran out of lives...");
                        System.out.println(cName + "'s journey ended unexpectedly.");
                        clearConsole(9000);
                        input.close();
                        System.exit(1);
                    }

                    System.out.println(ALLY + "BUT THAT DIDNT STOP " + cName.toUpperCase() + "!\n" + RESET);
                    System.out.println("Lives left: " + lives);
                    damage += 10;
                    cHealth = cMaxHealth;
                }
            } else {
                System.out.println(ENEMY + eName[i] + " missed!\n" + RESET);
            }
        }
    }

    return lives;
}

// Method that increases character's level
public static int levelUp(String cName, int level) {
    level++;
    System.out.println(cName + " leveled up!\n");
    System.out.println(cName + " is now level " + level);
    return level;
}

// Method that lets player increase character's skills (skill cap is 100)
public static int[] increaseSkills(String cName, int[] skills) {
    System.out.println("What skill would you like to assign 5 points to:");
    System.out.println("\n1. Strength\n2. Speech\n3. Stamina\n4. Sneak\n");

    switch (playerSelection()) {
        case "1":
            if (skills[0] >= 100) {
                skills[0] = 100;
                System.out.println("Sorry! " + cName + " reached the max Strength level.");
            } else {
                skills[0] += 5;
                System.out.println("5 points have been assigned to Strength.");
            }
            break;
        case "2":
            if (skills[1] >= 100) {
                skills[1] = 100;
                System.out.println("Sorry! " + cName + " reached the max Speech level.");
            } else {
                skills[1] += 5;
                System.out.println("5 points have been assigned to Speech.");
            }
            break;
        case "3":
            if (skills[2] >= 100) {
                skills[2] = 100;
                System.out.println("Sorry! " + cName + " reached the max Stamina level.");
            } else {
                skills[2] += 5;
                System.out.println("5 points have been assigned to Stamina.");
            }
            break;
        case "4":
            if (skills[3] >= 100) {
                skills[3] = 100;
                System.out.println("Sorry! " + cName + " reached the max Sneak level.");
            } else {
                skills[3] += 5;
                System.out.println("5 points have been assigned to Sneak.");
            }
            break;
        default:
            System.out.println("That's not an option.");
    }

    return skills;
}

// Method that lets player increase character's damage multipliers (damage multipliers are capped at 3.0)
public static double[] increaseDamage(String cName, double[] damageMultipliers) {
    System.out.println("What damage multiplier would you like to assign 0.25 points to:");
    System.out.println("\n1. Sharp\n2. Blunt\n3. Elemental\n4. Ranged\n");

    switch (playerSelection()) {
        case "1":
            if (damageMultipliers[0] >= 3.0) {
                damageMultipliers[0] = 3.0;
                System.out.println("Sorry! " + cName + " has reached the max miltiplier for Sharp damage.");
            } else {
                damageMultipliers[0] += 0.25;
                System.out.println("0.25 points have been assigned to Sharp damage.");
            }
            break;
        case "2":
            if (damageMultipliers[1] >= 3.0) {
                damageMultipliers[1] = 3.0;
                System.out.println("Sorry! " + cName + " has reached the max miltiplier for Blunt damage.");
            } else {
                damageMultipliers[1] += 0.25;
                System.out.println("0.25 points have been assigned to Blunt damage.");
            }
            break;
        case "3":
            if (damageMultipliers[2] >= 3.0) {
                damageMultipliers[2] = 3.0;
                System.out.println("Sorry! " + cName + " has reached the max miltiplier for Elemental damage.");
            } else {
                damageMultipliers[2] += 0.25;
                System.out.println("0.25 points have been assigned to Elemental damage.");
            }
            break;
        case "4":
            if (damageMultipliers[3] >= 3.0) {
                damageMultipliers[3] = 3.0;
                System.out.println("Sorry! " + cName + " has reached the max miltiplier for Ranged damage.");
            } else {
                damageMultipliers[3] += 0.25;
                System.out.println("0.25 points have been assigned to Ranged damage.");
            }
            break;
        default:
            System.out.println("That's not an option.");
    }

    clearConsole(2000);
    return damageMultipliers;
}

// __________________________________________________  End of TBCS  __________________________________________________



// ____________________________________________________________________________________________________   End Of Function Junction   ____________________________________________________________________________________________________

}
